"use client";

import React, { useState } from "react";
import { useSeizeConnectContext } from "@/components/auth/SeizeConnectContext";
import { useIdentity } from "@/hooks/useIdentity";
import { EllipsisVerticalIcon } from "@heroicons/react/24/outline";
import DropPfp from "@/components/drops/create/utils/DropPfp";
import { DropPartSize } from "@/components/drops/view/part/DropPart";
import HeaderUserProxyDropdown from "@/components/header/user/proxy/HeaderUserProxyDropdown";
import UserLevel from "@/components/user/utils/level/UserLevel";
import {
  isEthereumAddress,
  isAutoGeneratedHandle,
} from "@/helpers/AllowlistToolHelpers";

interface DesktopSidebarUserProps {
  isCollapsed: boolean;
}

function DesktopSidebarUser({ isCollapsed }: DesktopSidebarUserProps) {
  const [showUserMenu, setShowUserMenu] = useState(false);
  const { address } = useSeizeConnectContext();

  const { profile, isLoading } = useIdentity({
    handleOrWallet: address || "",
    initialProfile: null,
  });

  // Inline derived state
  const displayHandle = profile?.handle || address || "";
  const shouldTruncate =
    address && (isEthereumAddress(address) || isAutoGeneratedHandle(address));

  // If no address, don't show user section at all
  if (!address) {
    return null;
  }

  // If loading or no profile, show loading state (like header does)
  if (isLoading || !profile) {
    return (
      <div
        className={`tw-mt-auto tw-relative ${
          isCollapsed ? "tw-px-2 tw-pb-3" : "tw-px-4 tw-pb-4"
        }`}
      >
        <div
          className={`tw-flex tw-items-center tw-w-full tw-rounded-xl ${
            isCollapsed
              ? "tw-justify-center tw-px-2"
              : "tw-justify-start tw-px-3 tw-gap-x-3 tw-py-2"
          }`}
        >
          <div className="tw-h-10 tw-w-10 tw-rounded-lg tw-bg-iron-800 tw-animate-pulse" />
          {!isCollapsed && (
            <div className="tw-flex tw-flex-col tw-gap-y-2 tw-flex-1">
              <div className="tw-h-4 tw-w-24 tw-bg-iron-800 tw-rounded tw-animate-pulse" />
              <div className="tw-h-3 tw-w-16 tw-bg-iron-800 tw-rounded tw-animate-pulse" />
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div
      className={`tw-mt-auto tw-relative ${
        isCollapsed ? "tw-px-2 tw-pb-3" : "tw-px-4 tw-pb-4"
      }`}
    >
      <button
        onClick={() => setShowUserMenu((prev) => !prev)}
        className={`tw-border-none tw-bg-transparent tw-flex tw-items-center tw-w-full tw-rounded-xl tw-text-sm tw-font-semibold tw-text-white tw-transition-colors tw-duration-200 desktop-hover:hover:tw-bg-iron-900 ${
          isCollapsed
            ? "tw-justify-center tw-px-2"
            : "tw-justify-start tw-px-3 tw-gap-x-3 tw-py-2"
        }`}
        aria-label="Open user menu"
        aria-expanded={showUserMenu}
        aria-controls="user-menu"
      >
        <DropPfp pfpUrl={profile.pfp} size={DropPartSize.MEDIUM} />
        {!isCollapsed && (
          <>
            <div className="tw-flex tw-flex-col tw-items-start tw-justify-between tw-min-w-0 tw-flex-1">
              <div
                className={`tw-text-white tw-font-medium tw-text-md tw-leading-tight tw-w-full tw-text-left tw-overflow-hidden -tw-mt-0.5 tw-mb-1 ${
                  shouldTruncate ? "tw-max-w-[8rem] tw-truncate" : ""
                }`}
              >
                {displayHandle}
              </div>
              <UserLevel level={profile.level} size="xxs" asSpan={true} />
            </div>
            <EllipsisVerticalIcon className="tw-h-5 tw-w-5 tw-flex-shrink-0 tw-text-iron-300 group-hover:tw-text-white" />
          </>
        )}
      </button>
      {/* <HeaderUserProxyDropdown
        profile={profile}
        isOpen={showUserMenu}
        onClose={() => setShowUserMenu(false)}
      /> */}
    </div>
  );
}

export default React.memo(DesktopSidebarUser);
