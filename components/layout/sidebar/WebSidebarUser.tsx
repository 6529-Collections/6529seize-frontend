"use client";

import React, { memo, useRef, useState } from "react";
import { useClickAway } from "react-use";
import { useSeizeConnectContext } from "@/components/auth/SeizeConnectContext";
import { useIdentity } from "@/hooks/useIdentity";
import {
  EllipsisVerticalIcon,
  UserCircleIcon,
} from "@heroicons/react/24/outline";
import DropPfp from "@/components/drops/create/utils/DropPfp";
import { DropPartSize } from "@/components/drops/view/part/DropPart";
import UserLevel from "@/components/user/utils/level/UserLevel";
import HeaderUserConnect from "@/components/header/user/HeaderUserConnect";
import HeaderUserProxyDropdown from "@/components/header/user/proxy/HeaderUserProxyDropdown";
import {
  isEthereumAddress,
  isAutoGeneratedHandle,
} from "@/helpers/AllowlistToolHelpers";

interface WebSidebarUserProps {
  readonly isCollapsed: boolean;
  readonly profile: any;
}

function WebSidebarUser({
  isCollapsed,
  profile: parentProfile,
}: WebSidebarUserProps) {
  const [showUserMenu, setShowUserMenu] = useState(false);
  const { address, seizeConnect } = useSeizeConnectContext();
  const dropdownRef = useRef<HTMLDivElement>(null);
  const buttonRef = useRef<HTMLButtonElement>(null);

  // Click away that properly handles button clicks
  useClickAway(dropdownRef, (event) => {
    if (
      showUserMenu &&
      buttonRef.current &&
      !buttonRef.current.contains(event.target as Node)
    ) {
      setShowUserMenu(false);
    }
  });

  const { profile: localProfile, isLoading } = useIdentity({
    handleOrWallet: address || "",
    initialProfile: null,
  });

  const profile = parentProfile || localProfile;

  const containerClasses = "tw-mt-auto tw-relative tw-w-full tw-group tw-pb-2 tw-px-3";

  if (!address) {
    return (
      <div className={containerClasses}>
        {isCollapsed ? (
          <button
            className="tw-w-full tw-block tw-no-underline tw-rounded-xl tw-border-none tw-transition-colors tw-duration-200 tw-h-12 tw-cursor-pointer focus:tw-outline-none focus-visible:tw-ring-2 focus-visible:tw-ring-iron-500 focus-visible:tw-ring-offset-2 tw-font-medium tw-text-base tw-px-2 tw-text-iron-400 tw-bg-transparent desktop-hover:hover:tw-text-white active:tw-bg-transparent"
            onClick={() => seizeConnect()}
            title="Connect Wallet"
            data-tooltip-id="sidebar-tooltip"
            data-tooltip-content="Connect Wallet"
          >
            <div className="tw-flex tw-items-center tw-w-full tw-h-full">
              <div className="tw-w-10 tw-flex tw-items-center tw-justify-center tw-flex-shrink-0">
                <UserCircleIcon className="tw-h-6 tw-w-6 tw-flex-shrink-0" />
              </div>
            </div>
          </button>
        ) : (
          <div className="tw-w-full tw-px-2 tw-mt-2">
            <div className="[&>button]:tw-w-full">
              <HeaderUserConnect />
            </div>
          </div>
        )}
      </div>
    );
  }

  // Loading state
  if (isLoading || !profile) {
    return (
      <div className={containerClasses}>
        <div
          className={`tw-flex tw-items-center tw-w-full tw-rounded-xl tw-py-2 tw-px-2 ${
            isCollapsed
              ? "tw-justify-center"
              : "tw-justify-start tw-gap-x-3"
          }`}
        >
          <div className="tw-h-10 tw-w-10 tw-rounded-lg tw-bg-iron-800 tw-animate-pulse tw-flex-shrink-0" />
          {!isCollapsed && (
            <div className="tw-flex tw-flex-col tw-gap-y-2 tw-flex-1">
              <div className="tw-h-4 tw-w-24 tw-bg-iron-800 tw-rounded tw-animate-pulse" />
              <div className="tw-h-3 tw-w-16 tw-bg-iron-800 tw-rounded tw-animate-pulse" />
            </div>
          )}
        </div>
      </div>
    );
  }

  // Derived state for authenticated user
  const displayHandle = profile.handle || address || "";
  const shouldTruncate =
    address && (isEthereumAddress(address) || isAutoGeneratedHandle(address));

  // Authenticated user
  return (
    <div className={containerClasses}>
      <button
        ref={buttonRef}
        onClick={() => setShowUserMenu(!showUserMenu)}
        className={`tw-mt-1 tw-group/user tw-py-2 tw-px-2 tw-border-none tw-bg-transparent tw-w-full tw-rounded-xl tw-text-sm tw-font-semibold tw-text-white tw-transition-colors tw-duration-200 ${
          isCollapsed ? "" : "desktop-hover:hover:tw-bg-iron-900"
        }`}
        aria-label="Open user menu"
        aria-expanded={showUserMenu}
        aria-controls="user-menu"
      >
        <div className={`tw-flex tw-items-center tw-w-full ${isCollapsed ? "" : "tw-gap-x-2"}`}>
          <div className="tw-w-10 tw-flex tw-items-center tw-justify-center tw-flex-shrink-0">
            <DropPfp pfpUrl={profile.pfp} size={DropPartSize.MEDIUM} />
          </div>
          {!isCollapsed && (
          <>
            <div className="tw-flex tw-flex-col tw-items-start tw-justify-between tw-min-w-0 tw-flex-1 tw-whitespace-nowrap">
              <div
                className={`tw-text-white tw-font-medium tw-text-md tw-leading-tight tw-w-full tw-text-left tw-overflow-hidden -tw-mt-0.5 tw-mb-1 ${
                  shouldTruncate ? "tw-max-w-[8rem] tw-truncate" : ""
                }`}
              >
                {displayHandle}
              </div>
              <UserLevel level={profile.level} size="xxs" asSpan={true} />
            </div>
            <EllipsisVerticalIcon className="tw-h-5 tw-w-5 tw-flex-shrink-0 tw-text-iron-400 group-hover/user:tw-text-white" />
          </>
        )}
        </div>
      </button>
      {showUserMenu && profile && (
        <div ref={dropdownRef}>
          <HeaderUserProxyDropdown
            profile={profile}
            isOpen={showUserMenu}
            onClose={() => setShowUserMenu(false)}
          />
        </div>
      )}
    </div>
  );
}

export default memo(WebSidebarUser);
