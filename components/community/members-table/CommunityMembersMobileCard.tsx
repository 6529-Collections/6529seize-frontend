import {
  CommunityMemberOverview,
  CIC_TO_TEXT,
} from "../../../entities/IProfile";
import {
  formatNumberWithCommasOrDash,
  cicToType,
} from "../../../helpers/Helpers";
import UserLevel from "../../user/utils/level/UserLevel";
import { Tooltip } from "react-tooltip";
import UserCICTypeIcon from "../../user/utils/user-cic-type/UserCICTypeIcon";
import {
  isEthereumAddress,
  isAutoGeneratedHandle,
} from "../../../helpers/AllowlistToolHelpers";
import { ImageScale, getScaledImageUri } from "../../../helpers/image.helpers";
import CommonTimeAgo from "../../utils/CommonTimeAgo";
import Link from "next/link";

export default function CommunityMembersMobileCard({
  member,
  rank,
}: {
  readonly member: CommunityMemberOverview;
  readonly rank: number;
}) {
  const isNotProfile = isEthereumAddress(member.detail_view_key);
  const isProfile = !isNotProfile;
  const textColorClass = isProfile ? "tw-text-iron-50" : "tw-text-iron-400";
  const path = `/${member.detail_view_key}`;

  return (
    <Link
      href={path}
      className="tw-flex tw-flex-col tw-gap-y-3 tw-pt-4 tw-pb-3 tw-pl-3 tw-pr-4 tw-rounded-xl tw-bg-iron-900/80 tw-border tw-border-iron-800 tw-border-solid tw-backdrop-blur-md active:tw-bg-iron-800 tw-transition-all tw-duration-200 tw-no-underline tw-overflow-hidden tw-shadow-sm tw-shadow-black/20"
    >
      <div className="tw-flex tw-items-start tw-gap-x-3">
        <span className="tw-text-iron-400 tw-text-xs tw-w-5 tw-flex-shrink-0">
          #{rank}
        </span>
        <div className="tw-flex tw-flex-col tw-w-full">
          <div className="tw-flex tw-justify-between tw-w-full">
            <div className="tw-flex tw-items-start tw-gap-x-3">
              <div
                className="tw-flex-shrink-0 tw-h-11 tw-w-11 tw-rounded-md tw-overflow-hidden tw-ring-1 tw-ring-white/10 tw-bg-iron-900 tw-flex tw-items-center 
          tw-justify-center"
              >
                {member.pfp && (
                  <img
                    src={getScaledImageUri(member.pfp, ImageScale.W_AUTO_H_50)}
                    alt={`${member.display} avatar`}
                    className="tw-h-full tw-w-full tw-object-contain tw-mx-auto"
                  />
                )}
              </div>
              <div className="tw-flex tw-flex-col tw-items-start tw-gap-y-1.5 tw-min-w-0">
                <div className="tw-flex tw-items-center -tw-mt-1">
                  <div
                    className={`tw-overflow-hidden ${
                      isEthereumAddress(member.detail_view_key) ||
                      isAutoGeneratedHandle(member.detail_view_key)
                        ? "tw-max-w-[8rem] tw-truncate"
                        : ""
                    }`}
                  >
                    <span
                      className={`tw-text-sm tw-font-medium ${textColorClass}`}
                    >
                      {member.display}
                    </span>
                  </div>
                </div>
                <UserLevel level={member.level} size="xs" />
              </div>
            </div>
            {member.last_activity && (
              <div className="tw-flex tw-items-center tw-gap-x-1 tw-ml-auto tw-self-start">
                <span className="tw-text-iron-400 tw-text-xs">Active</span>
                <span className="tw-text-iron-400 tw-text-xs">
                  <CommonTimeAgo
                    timestamp={member.last_activity}
                    short={true}
                    className="tw-text-xs"
                  />
                </span>
              </div>
            )}
          </div>
          <div className="tw-mt-4 tw-flex tw-items-center tw-gap-x-3 tw-whitespace-nowrap tw-justify-between">
            <div className="tw-flex tw-items-baseline tw-gap-x-1">
              <span className="tw-font-semibold tw-text-iron-50 tw-text-xxs">
                {formatNumberWithCommasOrDash(member.tdh)}
              </span>
              <span className="tw-text-iron-400 tw-text-xxs">TDH</span>
            </div>
            <div className="tw-flex tw-items-baseline tw-gap-x-1">
              <span className="tw-font-semibold tw-text-iron-50 tw-text-xxs">
                {formatNumberWithCommasOrDash(member.rep)}
              </span>
              <span className="tw-text-iron-400 tw-text-xxs">REP</span>
            </div>
            <div className="tw-flex tw-items-center tw-gap-x-1">
              <span className="tw-font-semibold tw-text-iron-50 tw-text-xxs">
                {formatNumberWithCommasOrDash(member.cic)}
              </span>
              <span 
                className="tw-h-4 tw-w-4 tw-flex-shrink-0"
                data-tooltip-id={`cic-tooltip-${member.detail_view_key}`}
              >
                <UserCICTypeIcon cic={member.cic} />
              </span>
              <Tooltip 
                id={`cic-tooltip-${member.detail_view_key}`}
                place="top"
                style={{
                  backgroundColor: "#1F2937",
                  color: "white", 
                  padding: "4px 8px",
                }}
              >
                {CIC_TO_TEXT[cicToType(member.cic)]}
              </Tooltip>
            </div>
          </div>
        </div>
      </div>
    </Link>
  );
}
