import React from "react";
import { ApiWaveLog } from "../../../generated/models/ApiWaveLog";
import {
  formatNumberWithCommas,
  getTimeAgoShort,
} from "../../../helpers/Helpers";
import Link from "next/link";
import { ApiWaveCreditType } from "../../../generated/models/ApiWaveCreditType";
import { SystemAdjustmentPill } from "../../common/SystemAdjustmentPill";
import useIsMobileScreen from "../../../hooks/isMobileScreen";
import Image from "next/image";
import { getScaledImageUri, ImageScale } from "../../../helpers/image.helpers";
import {
  isEthereumAddress,
  isAutoGeneratedHandle,
} from "../../../helpers/AllowlistToolHelpers";

interface SingleWaveDropLogProps {
  readonly log: ApiWaveLog;
  readonly creditType: ApiWaveCreditType;
}

export const SingleWaveDropLog: React.FC<SingleWaveDropLogProps> = ({
  log,
  creditType,
}) => {
  const isMobile = useIsMobileScreen();
  const handleValue = log.invoker.handle ?? "";
  const shouldLimit =
    isEthereumAddress(handleValue) || isAutoGeneratedHandle(handleValue);

  const avatar = log.invoker.pfp ? (
    <Image
      src={getScaledImageUri(log.invoker.pfp, ImageScale.W_AUTO_H_50)}
      alt="User profile picture"
      width={isMobile ? 28 : 24}
      height={isMobile ? 28 : 24}
      className="tw-rounded-md tw-ring-1 tw-ring-white/10 tw-bg-iron-800 tw-flex-shrink-0 tw-object-contain"
    />
  ) : (
    <div
      className={`tw-rounded-md tw-ring-1 tw-ring-white/10 tw-bg-iron-800 tw-flex-shrink-0 ${
        isMobile ? "tw-size-7" : "tw-size-6"
      }`}
    />
  );

  const handleLink = (
    <Link
      href={`/${log.invoker.handle}`}
      className="tw-no-underline tw-group desktop-hover:hover:tw-opacity-80 tw-transition-all tw-duration-300"
    >
      <span
        className={`tw-inline-block${
          shouldLimit ? " tw-truncate tw-max-w-[8rem]" : ""
        }`}
      >
        <span className="tw-text-sm tw-font-medium tw-text-iron-50 tw-transition-all tw-duration-300 desktop-hover:group-hover:tw-text-iron-300">
          {log.invoker.handle}
        </span>
      </span>
    </Link>
  );

  return (
    <div className="tw-p-3 tw-bg-iron-900">
      {isMobile ? (
        <div className="tw-flex tw-gap-3">
          {/* Avatar */}
          {avatar}

          {/* Content */}
          <div className="tw-flex tw-flex-col tw-flex-1 tw-min-w-0">
            {/* Top row: username and timestamp */}
            <div className="tw-flex tw-items-center tw-justify-between tw-gap-2">
              {handleLink}
              <div className="tw-flex tw-items-center tw-gap-1 tw-whitespace-nowrap">
                <svg
                  className="tw-w-3 tw-h-3 tw-text-iron-400"
                  viewBox="0 0 24 24"
                  aria-hidden="true"
                  fill="none"
                >
                  <path
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                    stroke="currentColor"
                    strokeWidth="1.5"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  />
                </svg>
                <span className="tw-text-xs tw-font-medium tw-text-iron-400">
                  {getTimeAgoShort(new Date(log.created_at).getTime())}
                </span>
              </div>
            </div>

            {/* Action row */}
            <div className="tw-flex tw-flex-wrap tw-items-center tw-gap-x-1.5 tw-gap-y-1.5 tw-mt-1">
              <span className="tw-text-sm tw-text-iron-400">
                {log.contents.oldVote === 0 ? "voted" : "changed from"}
              </span>
              {log.contents.oldVote !== 0 && (
                <span className="tw-text-sm tw-text-iron-500 tw-whitespace-nowrap">
                  {formatNumberWithCommas(log.contents.oldVote)} →
                </span>
              )}
              <span
                className={`tw-text-sm tw-font-semibold tw-whitespace-nowrap ${
                  log.contents.newVote > 0 ? "tw-text-green" : "tw-text-red"
                }`}
              >
                {formatNumberWithCommas(log.contents.newVote)} {creditType}
              </span>
              {log.contents?.reason === "CREDIT_OVERSPENT" && (
                <SystemAdjustmentPill />
              )}
            </div>
          </div>
        </div>
      ) : (
        <div className="tw-flex tw-items-center tw-justify-between tw-gap-x-2">
          <div className="tw-flex tw-items-center tw-gap-x-2 tw-gap-y-2">
            {avatar}
            <div className="tw-inline-flex tw-items-center tw-gap-x-1 tw-gap-y-1 tw-flex-wrap">
              {handleLink}

              <span className="tw-text-sm tw-text-iron-400">
                {log.contents.oldVote === 0 ? "voted" : "changed from"}
              </span>
              {log.contents.oldVote !== 0 && (
                <span className="tw-text-sm tw-text-iron-500 tw-whitespace-nowrap">
                  {formatNumberWithCommas(log.contents.oldVote)} →
                </span>
              )}
              <span
                className={`tw-text-sm tw-font-semibold tw-whitespace-nowrap ${
                  log.contents.newVote > 0 ? "tw-text-green" : "tw-text-red"
                }`}
              >
                {formatNumberWithCommas(log.contents.newVote)} {creditType}
              </span>
              {log.contents?.reason === "CREDIT_OVERSPENT" && (
                <SystemAdjustmentPill />
              )}
            </div>
          </div>
          <div className="tw-flex tw-items-center tw-gap-1.5 tw-whitespace-nowrap">
            <svg
              className="tw-w-3.5 tw-h-3.5 tw-text-iron-400 tw-flex-shrink-0"
              viewBox="0 0 24 24"
              aria-hidden="true"
              fill="none"
            >
              <path
                d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
              />
            </svg>
            <span className="tw-text-xs tw-font-medium tw-text-iron-400">
              {getTimeAgoShort(new Date(log.created_at).getTime())}
            </span>
          </div>
        </div>
      )}
    </div>
  );
};
