"use client";

import { useMemo, useState } from "react";
import type { ApiIdentity } from "@/generated/models/ApiIdentity";
import TargetSelector, { XtdhSelectedTarget } from "./TargetSelector";

type Summary = {
  baseRatePerDay: number | null;
  multiplier: number | null; // xTDH global multiplier
  xtdhRatePerDay: number | null;
  totalRatePerDay: number | null;
  allocatedRatePerDay: number | null;
  incomingRatePerDay: number | null;
};

enum XtdhInnerTab {
  OVERVIEW = "OVERVIEW",
  GIVE = "GIVE",
  RECEIVE = "RECEIVE",
  HISTORY = "HISTORY",
}

export default function UserPageXTDH({ profile }: { profile: ApiIdentity }) {
  // Section state
  const [tab, setTab] = useState<XtdhInnerTab>(XtdhInnerTab.OVERVIEW);

  // Placeholder state for allocation form (no API calls yet)
  const [target, setTarget] = useState<string>("");
  const [amountPerDay, setAmountPerDay] = useState<string>("");
  const [selectedTarget, setSelectedTarget] = useState<XtdhSelectedTarget | null>(null);

  // Receive filter mock
  const [receiveFilter, setReceiveFilter] = useState<"ALL" | "ACTIVE" | "PENDING">("ALL");

  // Derived placeholder summary; wire to API later
  const summary: Summary = useMemo(() => {
    // In the real implementation, these come from identity stats
    const base = null;
    const mult = 0.1; // example default until wired
    const xtdh = base != null && mult != null ? +(base * mult).toFixed(4) : null;
    const total = base != null && xtdh != null ? +(base + xtdh).toFixed(4) : null;
    return {
      baseRatePerDay: base,
      multiplier: mult,
      xtdhRatePerDay: xtdh,
      totalRatePerDay: total,
      allocatedRatePerDay: null,
      incomingRatePerDay: null,
    };
  }, []);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // No-op for now; wire to API actions later
  };

  const Stat = ({ label, value }: { label: string; value: string }) => (
    <div className="tw-flex tw-flex-col tw-gap-1">
      <div className="tw-text-iron-400 tw-text-xs tw-uppercase">{label}</div>
      <div className="tw-text-iron-100 tw-text-lg tw-font-semibold">{value}</div>
    </div>
  );

  const Card = ({ title, children }: { title: string; children: React.ReactNode }) => (
    <div className="tw-bg-iron-900 tw-rounded-lg tw-border tw-border-iron-700 tw-p-4 lg:tw-p-5">
      <div className="tw-text-iron-100 tw-font-semibold tw-mb-3">{title}</div>
      {children}
    </div>
  );

  const Tabs = () => (
    <div className="tw-flex tw-gap-2 tw-flex-wrap">
      {[
        { id: XtdhInnerTab.OVERVIEW, label: "Overview" },
        { id: XtdhInnerTab.GIVE, label: "Give" },
        { id: XtdhInnerTab.RECEIVE, label: "Receive" },
        { id: XtdhInnerTab.HISTORY, label: "History" },
      ].map((t) => (
        <button
          key={t.id}
          onClick={() => setTab(t.id)}
          className={`tw-text-sm tw-rounded tw-border tw-px-3 tw-py-1 tw-transition ${
            tab === t.id
              ? "tw-bg-primary-600 tw-border-primary-600 tw-text-white"
              : "tw-bg-iron-900 tw-border-iron-700 tw-text-iron-200 hover:tw-bg-iron-800"
          }`}
        >
          {t.label}
        </button>
      ))}
    </div>
  );

  const asValue = (v: number | null, suffix = "") => (v == null ? "—" : `${v}${suffix}`);

  const Overview = () => (
    <div className="tw-grid tw-grid-cols-1 lg:tw-grid-cols-5 tw-gap-4">
      <div className="lg:tw-col-span-2 tw-flex tw-flex-col tw-gap-4">
        <Card title="TDH Overview">
          <div className="tw-grid tw-grid-cols-2 tw-gap-4">
            <Stat label="Base TDH Rate / day" value={asValue(summary.baseRatePerDay ?? null)} />
            <Stat label="xTDH Multiplier" value={summary.multiplier == null ? "—" : `× ${summary.multiplier}`} />
            <Stat label="xTDH Rate / day" value={asValue(summary.xtdhRatePerDay ?? null)} />
            <Stat label="Total TDH Rate / day" value={asValue(summary.totalRatePerDay ?? null)} />
          </div>
          <div className="tw-text-iron-400 tw-text-xs tw-mt-3">
            TDH = Base TDH + xTDH. Base TDH is generated by Memes & Gradients; xTDH is assignable.
          </div>
        </Card>

        <Card title="xTDH Capacity">
          <div className="tw-flex tw-flex-col tw-gap-3">
            <div className="tw-flex tw-justify-between tw-text-sm">
              <span className="tw-text-iron-300">Allocated (outgoing)</span>
              <span className="tw-text-iron-100">{asValue(summary.allocatedRatePerDay, " / day")}</span>
            </div>
            <div className="tw-h-2 tw-rounded tw-bg-iron-800">
              <div className="tw-h-2 tw-rounded tw-bg-primary-500" style={{ width: "0%" }} />
            </div>
            <div className="tw-flex tw-justify-between tw-text-sm">
              <span className="tw-text-iron-300">Incoming xTDH</span>
              <span className="tw-text-iron-100">{asValue(summary.incomingRatePerDay, " / day")}</span>
            </div>
          </div>
        </Card>
      </div>

      <div className="lg:tw-col-span-3 tw-flex tw-flex-col tw-gap-4">
        <Card title="What is xTDH?">
          <div className="tw-text-iron-300 tw-text-sm tw-space-y-2">
            <p>Base TDH is generated by Memes & Gradients and is predictable. xTDH is a multiplier-based capacity you can allocate to external targets.</p>
            <p>Allocating xTDH reduces your own accrual; totals remain capped by Base TDH. Grants are reversible and adjust pro‑rata if your Base TDH changes.</p>
          </div>
        </Card>
      </div>
    </div>
  );

  const Give = () => (
    <>
      <div className="tw-grid tw-grid-cols-1 lg:tw-grid-cols-5 tw-gap-4">
        <div className="lg:tw-col-span-2 tw-flex tw-flex-col tw-gap-4">
          <Card title="xTDH Capacity">
            <div className="tw-flex tw-flex-col tw-gap-3">
              <div className="tw-flex tw-justify-between tw-text-sm">
                <span className="tw-text-iron-300">Allocated</span>
                <span className="tw-text-iron-100">{asValue(summary.allocatedRatePerDay, " / day")}</span>
              </div>
              <div className="tw-h-2 tw-rounded tw-bg-iron-800">
                <div className="tw-h-2 tw-rounded tw-bg-primary-500" style={{ width: "0%" }} />
              </div>
              <div className="tw-text-iron-400 tw-text-xs">
                Available xTDH capacity is multiplier × Base TDH. Allocation reduces your own accrual accordingly.
              </div>
            </div>
          </Card>
        </div>
        <div className="lg:tw-col-span-3">
          <Card title="Allocate xTDH">
            <div className="tw-mb-3">
              <TargetSelector onChange={setSelectedTarget} />
            </div>
            <form className="tw-flex tw-flex-col tw-gap-3" onSubmit={handleSubmit}>
              <label className="tw-text-iron-200 tw-text-sm">Target</label>
              <input
                value={target}
                onChange={(e) => setTarget(e.target.value)}
                placeholder={selectedTarget ? `${selectedTarget.contractAddress} (${selectedTarget.scope})` : "Contract / Collection / Token / Trait / Coin"}
                className="tw-bg-iron-800 tw-text-iron-100 tw-rounded tw-border tw-border-iron-700 tw-px-3 tw-py-2 focus:tw-outline-none focus:tw-border-primary-500"
                disabled={!!selectedTarget}
              />
              <label className="tw-text-iron-200 tw-text-sm">Allocation (TDH Rate / day)</label>
              <input
                value={amountPerDay}
                onChange={(e) => setAmountPerDay(e.target.value)}
                placeholder="e.g. 0.25"
                className="tw-bg-iron-800 tw-text-iron-100 tw-rounded tw-border tw-border-iron-700 tw-px-3 tw-py-2 focus:tw-outline-none focus:tw-border-primary-500"
              />
              <div className="tw-flex tw-gap-2 tw-justify-end tw-pt-2">
                <button
                  type="button"
                  className="tw-bg-iron-800 tw-text-iron-200 tw-rounded tw-px-3 tw-py-2 tw-border tw-border-iron-700 hover:tw-bg-iron-700 tw-transition"
                  onClick={() => {
                    setTarget("");
                    setAmountPerDay("");
                    setSelectedTarget(null);
                  }}
                >
                  Reset
                </button>
                <button
                  type="submit"
                  className="tw-bg-primary-600 tw-text-white tw-rounded tw-px-4 tw-py-2 hover:tw-bg-primary-500 tw-transition"
                  disabled={!selectedTarget || !amountPerDay}
                  title={!selectedTarget ? "Pick a target first" : "Disabled in skeleton"}
                >
                  Allocate
                </button>
              </div>
              <div className="tw-text-iron-400 tw-text-xs">
                Distribution rules (721/1155/traits/fungible) and effective timing will be added here.
              </div>
            </form>
          </Card>
        </div>
      </div>

      <Card title="Active Grants (Outgoing)">
        <div className="tw-overflow-x-auto">
          <table className="tw-min-w-full tw-text-sm">
            <thead>
              <tr className="tw-text-iron-300">
                <th className="tw-text-left tw-font-medium tw-py-2">Target</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Allocation / day</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Status</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Last Update</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr className="tw-border-t tw-border-iron-800">
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2">
                  <button className="tw-text-iron-300 tw-text-xs" disabled>
                    Edit
                  </button>
                  <span className="tw-text-iron-700 tw-px-2">|</span>
                  <button className="tw-text-iron-300 tw-text-xs" disabled>
                    Revoke
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </Card>
    </>
  );

  const Receive = () => (
    <>
      <div className="tw-grid tw-grid-cols-1 lg:tw-grid-cols-5 tw-gap-4">
        <div className="lg:tw-col-span-2">
          <Card title="Incoming xTDH Summary">
            <div className="tw-grid tw-grid-cols-2 tw-gap-4">
              <Stat label="Incoming xTDH / day" value={asValue(summary.incomingRatePerDay, " ")} />
              <Stat label="Sources (Active)" value="—" />
            </div>
            <div className="tw-text-iron-400 tw-text-xs tw-mt-3">
              Incoming xTDH accrues when you hold eligible assets and a grantor’s allocation is active and funded.
            </div>
          </Card>
        </div>
        <div className="lg:tw-col-span-3">
          <Card title="Filters">
            <div className="tw-flex tw-gap-2 tw-flex-wrap">
              {["ALL", "ACTIVE", "PENDING"].map((f) => (
                <button
                  key={f}
                  onClick={() => setReceiveFilter(f as any)}
                  className={`tw-text-xs tw-rounded tw-border tw-px-2 tw-py-1 tw-transition ${
                    receiveFilter === f
                      ? "tw-bg-primary-600 tw-border-primary-600 tw-text-white"
                      : "tw-bg-iron-900 tw-border-iron-700 tw-text-iron-200 hover:tw-bg-iron-800"
                  }`}
                >
                  {f}
                </button>
              ))}
            </div>
          </Card>
        </div>
      </div>

      <Card title="Incoming xTDH (By Source)">
        <div className="tw-overflow-x-auto">
          <table className="tw-min-w-full tw-text-sm">
            <thead>
              <tr className="tw-text-iron-300">
                <th className="tw-text-left tw-font-medium tw-py-2">Grantor</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Target</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Your Share / day</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Status</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Since</th>
                <th className="tw-text-left tw-font-medium tw-py-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              <tr className="tw-border-t tw-border-iron-800">
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2 tw-text-iron-200">—</td>
                <td className="tw-py-2">
                  <button className="tw-text-iron-300 tw-text-xs" disabled>
                    View
                  </button>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </Card>
    </>
  );

  const History = () => (
    <div className="tw-grid tw-grid-cols-1 lg:tw-grid-cols-2 tw-gap-4">
      <Card title="Outgoing (Grants)">
        <div className="tw-text-iron-300 tw-text-sm">No outgoing history in skeleton.</div>
      </Card>
      <Card title="Incoming (Received)">
        <div className="tw-text-iron-300 tw-text-sm">No incoming history in skeleton.</div>
      </Card>
    </div>
  );

  return (
    <div className="tw-flex tw-flex-col tw-gap-6">
      <div className="tw-flex tw-items-baseline tw-justify-between">
        <h2 className="tw-text-iron-100 tw-text-xl lg:tw-text-2xl tw-font-semibold">xTDH Control Center</h2>
        <div className="tw-text-iron-400 tw-text-sm">{profile?.handle || profile?.display || "Identity"}</div>
      </div>

      <Tabs />

      {tab === XtdhInnerTab.OVERVIEW && <Overview />}
      {tab === XtdhInnerTab.GIVE && <Give />}
      {tab === XtdhInnerTab.RECEIVE && <Receive />}
      {tab === XtdhInnerTab.HISTORY && <History />}
    </div>
  );
}
