#!/usr/bin/env bash

# ----------------------------------------------------------------------------
# Script: dev-ec2-setup.sh
#
# Description:
#   Bootstraps a host to build & run 6529seize-frontend for staging/dev.
#   - Accepts Node >= 20; installs Node 20 only if Node missing or < 20.
#   - Ensures npm >= 10 (upgrades if < 10; leaves 10+ unchanged).
#   - Installs PM2, prompts for .env if missing, builds, starts via PM2.
#
# Usage:
#   bash scripts/dev-ec2-setup.sh
# ----------------------------------------------------------------------------

set -Eeuo pipefail
trap 'echo -e "\033[31m[ERROR]\033[0m line $LINENO: \"$BASH_COMMAND\" failed. Exiting." >&2' ERR

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

color() {
  local code="$1"; shift
  local text="$*"
  case "$code" in
    red)     echo -e "\033[31m${text}\033[0m";;
    green)   echo -e "\033[32m${text}\033[0m";;
    yellow)  echo -e "\033[33m${text}\033[0m";;
    blue)    echo -e "\033[34m${text}\033[0m";;
    magenta) echo -e "\033[35m${text}\033[0m";;
    cyan)    echo -e "\033[36m${text}\033[0m";;
    *)       echo "$text";;
  esac
}

require_sudo_if_linux() {
  if [[ "$(uname -s)" != "Darwin" ]]; then
    if [[ "$EUID" -ne 0 ]] && ! command -v sudo >/dev/null 2>&1; then
      color red "This script needs root or sudo privileges on Linux. Aborting."
      exit 1
    fi
  fi
}

ensure_node_ge20_and_npm_ge10() {
  # Accept Node >= 20 (20, 21, 22, …). Install Node 20 only if Node missing or < 20.
  local os="$(uname -s)"
  local have_node=false
  local have_ver=""

  if command -v node >/dev/null 2>&1; then
    have_node=true
    have_ver="$(node -v | sed 's/^v//')"
    local have_major="${have_ver%%.*}"
    if [[ "$have_major" -ge 20 ]]; then
      color green "Node v$have_ver detected (>= 20). OK."
    else
      color yellow "Node v$have_ver detected (< 20). Installing Node 20…"
      have_node=false  # force install path below
    fi
  else
    color yellow "Node not found. Installing Node 20…"
  fi

  if [[ "$have_node" == false ]]; then
    if [[ "$os" == "Darwin" ]]; then
      if command -v brew >/dev/null 2>&1; then
        brew install node@20
        brew unlink node >/dev/null 2>&1 || true
        brew link --overwrite --force node@20
      else
        color red "Homebrew not found. Please install Node 20 via Homebrew or nvm, then re-run."
        exit 1
      fi
    else
      curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
      sudo apt-get update -y
      sudo apt-get install -y nodejs build-essential
    fi
  fi

  # Final Node check
  local final_node="$(node -v | sed 's/^v//')"
  local final_major="${final_node%%.*}"
  if [[ "$final_major" -lt 20 ]]; then
    color red "Node $(node -v) < 20 after installation. Please install Node >= 20 and re-run."
    exit 1
  fi

  # Ensure npm >= 10 (upgrade only if below 10; do NOT downgrade if npm is 11+)
  local npm_major
  npm_major="$(npm -v | cut -d. -f1 || echo 0)"
  if [[ "$npm_major" -lt 10 ]]; then
    color yellow "Upgrading npm to >=10…"
    if [[ "$os" == "Darwin" ]]; then npm i -g npm@^10; else sudo npm i -g npm@^10; fi
  else
    color green "npm $(npm -v) detected (>= 10). OK."
  fi

  color green "Using Node $(node -v), npm $(npm -v)"
}

install_pm2() {
  if ! command -v pm2 >/dev/null 2>&1; then
    color yellow "Installing PM2 globally…"
    if [[ "$(uname -s)" == "Darwin" ]]; then
      npm i -g pm2
    else
      sudo npm i -g pm2
    fi
  fi
  color green "PM2: $(pm2 -v)"
}

create_env_file() {
  local env_file="$REPO_ROOT/.env"
  local sample_file="$REPO_ROOT/.env.sample"

  if [[ ! -f "$sample_file" ]]; then
    color red "Error: .env.sample not found at repo root ($REPO_ROOT)."
    exit 1
  fi

  declare -A EXISTING
  if [[ -f "$env_file" ]]; then
    if grep -Eq '^[A-Za-z_][A-Za-z0-9_]*=' "$env_file"; then
      while IFS= read -r line; do
        [[ -z "${line//[[:space:]]/}" || "$line" =~ ^[[:space:]]*# ]] && continue
        line="${line%%#*}"
        IFS='=' read -r k v <<< "$line"
        k="${k//[[:space:]]/}"
        v="${v%%[[:space:]]}"
        v="${v%\"}"; v="${v#\"}"; v="${v%\'}"; v="${v#\'}"
        [[ -n "$k" ]] && EXISTING["$k"]="$v"
      done < "$env_file"
      color yellow ".env exists; will prefill prompts from it and rewrite cleanly."
    else
      color yellow ".env exists but is empty; will recreate from .env.sample."
    fi
  else
    color yellow ".env not found. Creating from .env.sample…"
  fi

  local tmp_env
  tmp_env="$(mktemp)"
  echo "# Autogenerated .env $(date -u +'%Y-%m-%dT%H:%M:%SZ')" > "$tmp_env"

  while IFS= read -r line || [[ -n "$line" ]]; do
    if [[ -z "${line//[[:space:]]/}" || "$line" =~ ^[[:space:]]*# ]]; then
      echo "$line" >> "$tmp_env"
      continue
    fi
    local raw="${line%%#*}"
    if ! [[ "$raw" =~ ^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*=(.*)$ ]]; then
      echo "$line" >> "$tmp_env"
      continue
    fi
    local key="${BASH_REMATCH[1]}"
    local def="${BASH_REMATCH[2]}"
    key="${key//[[:space:]]/}"
    def="${def%%[[:space:]]*}"
    def="${def%\"}"; def="${def#\"}"; def="${def%\'}"; def="${def#\'}"

    local current="${EXISTING[$key]:-$def}"
    if [[ -n "$current" ]]; then
      read -r -p "Enter value for $key [default: $current]: " val
      val="${val:-$current}"
    else
      read -r -p "Enter value for $key: " val
    fi

    if [[ "$val" =~ [[:space:]#] || "$val" =~ ^[[:space:]] || "$val" =~ [[:space:]]$ ]]; then
      echo "$key=\"${val//\"/\\\"}\"" >> "$tmp_env"
    else
      echo "$key=$val" >> "$tmp_env"
    fi
  done < "$sample_file"

  mv "$tmp_env" "$env_file"
  color green "Wrote $env_file"
}

assert_env_ready() {
  local env_file="$REPO_ROOT/.env"
  local sample_file="$REPO_ROOT/.env.sample"
  [[ -f "$env_file" ]] || { color red ".env missing after creation."; exit 1; }

  # Ensure every KEY in .env.sample has a non-empty value in .env
  while IFS= read -r line || [[ -n "$line" ]]; do
    [[ -z "${line//[[:space:]]/}" || "$line" =~ ^[[:space:]]*# ]] && continue
    local raw="${line%%#*}"
    if [[ "$raw" =~ ^[[:space:]]*([A-Za-z_][A-Za-z0-9_]*)[[:space:]]*= ]]; then
      local key="${BASHREMATCH[1]}"
      key="${key//[[:space:]]/}"
      local val="$(grep -E "^$key=" "$env_file" | tail -n1 | cut -d= -f2-)"
      val="${val%\"}"; val="${val#\"}"; val="${val%\'}"; val="${val#\'}"
      if [[ -z "$val" ]]; then
        color red "Required env var '$key' is empty or missing in .env. Re-run create_env_file()."
        exit 1
      fi
    fi
  done < "$sample_file"
}

install_dependencies() {
  color yellow "Installing project dependencies…"
  # Clean if previously installed under a different Node version
  if [[ -d "$REPO_ROOT/node_modules" ]]; then
    color yellow "Removing existing node_modules and lockfile for a clean install…"
    rm -rf "$REPO_ROOT/node_modules" "$REPO_ROOT/package-lock.json"
  fi
  ( cd "$REPO_ROOT" && npm install )
  color green "Dependencies installed."
}

build_project() {
  color yellow "Building the Next.js project…"
  ( cd "$REPO_ROOT" && npm run build )
  color green "Build completed."
}

start_pm2() {
  local pm2_name="6529seize"
  color yellow "Starting the application with PM2…"
  ( cd "$REPO_ROOT" && pm2 start npm --name="$pm2_name" -- run start )
  pm2 save
  color green "App started under PM2 as '$pm2_name'."
  color blue  "Logs: pm2 logs $pm2_name"
  color blue  "Port: see package.json (currently 3001)."
}

main() {
  require_sudo_if_linux
  ensure_node_ge20_and_npm_ge10
  install_pm2
  create_env_file
  assert_env_ready
  install_dependencies
  build_project
  start_pm2
}

main "$@"