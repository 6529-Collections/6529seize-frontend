#!/usr/bin/env bash

# ----------------------------------------------------------------------------
# Script: dev-ec2-setup.sh
#
# Description:
#   This script bootstraps a fresh EC2 host with all the prerequisites needed
#   to run the 6529seize-frontend project in a staging environment. It is
#   intended to be run after cloning the repository onto a clean Ubuntu or
#   Debian instance. The script will install Node.js (>=18.18), the PM2
#   process manager, and all project dependencies. It will also check for a
#   `.env` file and, if one does not exist, prompt the user to provide the
#   necessary environment variables based off of `.env.sample`. Finally it
#   builds the Next.js project and launches it under PM2.
#
# Usage:
#   ./setup-staging.sh
#
# Notes:
#   - This script requires sudo privileges for installing system packages.
#   - It assumes the repository root contains a `.env.sample` file.
#   - The application will listen on the port specified in `package.json`
#     (currently 3001) once started by PM2.
#
set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

color() {
  # Helper function to output colored text
  # usage: color <code> "your text"
  # where <code> is one of: red, green, yellow, blue, magenta, cyan
  local code="$1"
  shift
  local text="$*"
  case "$code" in
    red)    echo -e "\033[31m${text}\033[0m";;
    green)  echo -e "\033[32m${text}\033[0m";;
    yellow) echo -e "\033[33m${text}\033[0m";;
    blue)   echo -e "\033[34m${text}\033[0m";;
    magenta)echo -e "\033[35m${text}\033[0m";;
    cyan)   echo -e "\033[36m${text}\033[0m";;
    *)      echo "$text";;
  esac
}

install_node() {
  # Install Node.js 20 via the NodeSource repository if Node is missing or outdated
  if command -v node >/dev/null 2>&1; then
    local current_ver="$(node -v | sed 's/v//')"
    # Compare against minimum required version 18.18.0
    if node -e "require('semver'); const semver=require('semver'); process.exit(semver.lt('$current_ver','18.18.0')?0:1)"; then
      color yellow "Existing Node.js version ($current_ver) is older than 18.18.0; upgrading to latest LTS."
    else
      # Node version is sufficient; no need to reinstall.
      return 0
    fi
  else
    color yellow "Node.js is not installed. Installing Node.js LTS (20.x)..."
  fi
  # Add NodeSource repository and install
  curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
  sudo apt-get update -y
  sudo apt-get install -y nodejs build-essential
}

install_pm2() {
  # Install PM2 globally via npm if not already installed
  if ! command -v pm2 >/dev/null 2>&1; then
    color yellow "Installing PM2 globally..."
    sudo npm install -g pm2
  fi
}

create_env_file() {
  # Create a .env file based on .env.sample if it doesn't exist
  local env_file="$SCRIPT_DIR/.env"
  local sample_file="$SCRIPT_DIR/.env.sample"
  if [ -f "$env_file" ]; then
    color green ".env file already exists. Skipping creation."
    return 0
  fi
  if [ ! -f "$sample_file" ]; then
    color red "Error: .env.sample file not found. Cannot determine which variables to prompt for."
    exit 1
  fi
  color yellow ".env file not found. Creating a new one based on .env.sample."
  echo "# Autogenerated .env file" > "$env_file"
  while IFS= read -r line || [ -n "$line" ]; do
    # If the line is a comment or blank, copy it directly
    if [[ -z "${line//[[:space:]]/}" || "$line" =~ ^[[:space:]]*# ]]; then
      echo "$line" >> "$env_file"
      continue
    fi
    # Extract variable name and default value
    IFS='=' read -r var default <<< "$line"
    # Trim whitespace
    var="${var//[[:space:]]/}"
    default="${default//[[:space:]]/}"
    # Prompt user for the value; show the default if present
    if [ -n "$default" ]; then
      read -r -p "Enter value for $var [default: $default]: " value
      value="${value:-$default}"
    else
      read -r -p "Enter value for $var: " value
    fi
    echo "$var=$value" >> "$env_file"
  done < "$sample_file"
  color green "Created .env file."
}

install_dependencies() {
  # Install Node dependencies using npm
  color yellow "Installing project dependencies (this may take a while)..."
  npm install
  color green "Dependencies installed."
}

build_project() {
  # Build the Next.js project
  color yellow "Building the Next.js project..."
  npm run build
  color green "Build completed."
}

start_pm2() {
  # Start the app via PM2 and save the configuration
  local pm2_name="6529seize"
  color yellow "Starting the application using PM2..."
  pm2 start npm --name="$pm2_name" -- run start
  pm2 save
  color green "Application started under PM2 as '$pm2_name'."
  color blue "You can view logs with: pm2 logs $pm2_name"
  color blue "The app should be reachable on the port specified in package.json (currently 3001)."
}

main() {
  # Check for sudo privileges early
  if [ "$EUID" -ne 0 ]; then
    # Ensure that 'sudo' is available; if not, abort
    if ! command -v sudo >/dev/null 2>&1; then
      color red "This script requires either root privileges or sudo access. Exiting."
      exit 1
    fi
  fi
  install_node
  install_pm2
  create_env_file
  install_dependencies
  build_project
  start_pm2
}

main "$@"