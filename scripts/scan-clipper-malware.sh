#!/bin/bash
# scan-clipper-malware.sh - Detect clipper malware patterns in production build
# ZERO TOLERANCE APPROACH: Any clipboard + crypto pattern = BLOCK deployment

set -e

echo "üîç Clipper Malware Security Scan"
echo "================================="

# Check if Next.js build directory exists
if [ ! -d ".next" ]; then
    echo "‚ùå Next.js build directory (.next) not found"
    echo "   Run 'npm run build' first"
    exit 2
fi

SCAN_DIR=".next"
echo "üìÇ Scanning directory: $SCAN_DIR"

# Count total files to scan
TOTAL_FILES=$(find "$SCAN_DIR" -type f \
    -not -path "*/.next/cache/*" \
    -not -name "*.pack" \
    \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.mjs" -o -name "*.html" \) | wc -l)
echo "Files to scan: $TOTAL_FILES"

echo "üéØ Searching for clipper malware patterns..."

DETECTIONS_FOUND=false

# Function to check for a specific pattern and report results
check_pattern() {
    local pattern_name="$1"
    local pattern="$2"
    
    echo "üîç Checking: $pattern_name"
    
    # Find files containing this pattern
    FOUND_FILES=$(find "$SCAN_DIR" -type f \
        -not -path "*/.next/cache/*" \
        -not -name "*.pack" \
        \( -name "*.js" -o -name "*.jsx" -o -name "*.ts" -o -name "*.tsx" -o -name "*.mjs" -o -name "*.html" \) \
        -exec grep -l "$pattern" {} \; 2>/dev/null || true)
    
    if [ -n "$FOUND_FILES" ]; then
        echo "‚ö†Ô∏è  PATTERN DETECTED: $pattern_name"
        echo "üìÅ Files:"
        echo "$FOUND_FILES" | sed 's/^/  ‚Ä¢ /'
        echo
        DETECTIONS_FOUND=true
    fi
}

# Specific clipboard access patterns
check_pattern "navigator.clipboard.writeText" "navigator\.clipboard\.writeText"
check_pattern "navigator.clipboard.readText" "navigator\.clipboard\.readText"
check_pattern "document.execCommand paste" "document\.execCommand.*paste"
check_pattern "document.execCommand copy" "document\.execCommand.*copy"
check_pattern "addEventListener paste" "addEventListener.*['\"]paste['\"]"
check_pattern "addEventListener copy" "addEventListener.*['\"]copy['\"]"
check_pattern "clipboardData.getData" "clipboardData\.getData"
check_pattern "clipboardData.setData" "clipboardData\.setData"

# Suspicious address replacement patterns
check_pattern "replace with 0x address" "\.replace.*0x[a-fA-F0-9].*40"
check_pattern "clipboard + replace + 0x" "clipboard.*replace.*0x"
check_pattern "paste + replace + 0x" "paste.*replace.*0x"

# Event handler injection patterns
check_pattern "onpaste with replace" "\.onpaste.*replace"
check_pattern "oncopy with replace" "\.oncopy.*replace"
check_pattern "setInterval + clipboard" "setInterval.*clipboard"
check_pattern "setTimeout + clipboard" "setTimeout.*clipboard"

# Advanced evasion patterns
check_pattern "eval + clipboard" "eval.*clipboard"
check_pattern "Function + clipboard" "Function.*clipboard"
check_pattern "atob + clipboard" "atob.*clipboard"
check_pattern "btoa + clipboard" "btoa.*clipboard"

if [ "$DETECTIONS_FOUND" = true ]; then
    echo "‚ùå CLIPPER MALWARE PATTERNS DETECTED"
    echo "===================================="
    echo "üö® DEPLOYMENT BLOCKED - POTENTIAL FUND THEFT RISK"
    echo
    echo "‚ö†Ô∏è  CRITICAL SECURITY WARNING:"
    echo "Clipper malware can steal user funds by secretly replacing wallet addresses."
    echo "Review all flagged files above before deployment."
    echo
    echo "‚ö†Ô∏è  DO NOT DEPLOY until patterns are verified as legitimate!"
    exit 1
else
    echo "‚úÖ No clipper malware patterns detected"
    echo "   Production build appears safe from clipboard-based attacks"
    exit 0
fi