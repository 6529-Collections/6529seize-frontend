# Overview
This document outlines the plan to refactor the `hooks/useBreadcrumbs.ts` file. The primary problem is that the current file has grown to include multiple concerns: type definitions, static configurations, API fetching logic, utility functions, and the core hook logic itself. This makes the file long, harder to navigate, and less maintainable.

The proposed solution is to modularize the `useBreadcrumbs.ts` hook by separating these distinct concerns into dedicated files. This refactor aims to improve code organization, readability, maintainability, and the overall developer experience when working with the breadcrumb system. This is valuable for any developer who needs to understand, modify, or extend the breadcrumb functionality.

# Core Features (of this Refactor)
-   **Modularization of Types:**
    -   What it does: Consolidate all custom TypeScript type definitions related to the breadcrumbs system (e.g., `DynamicRouteType`, `RouteDynamicConfig`, `DeterminedRouteInfo`) into a single, dedicated file: `hooks/breadcrumbs.types.ts`.
    -   Why it's important: Centralizes type definitions, making them easier to find, manage, and import where needed. Reduces clutter in the main hook file.
    -   How it works: Create the new file, move type definitions, export them, and update imports in other files.
-   **Modularization of Configuration:**
    -   What it does: Isolate the `DYNAMIC_ROUTE_CONFIGS` array and its associated `DynamicRouteType` enum/type into `hooks/breadcrumbs.config.ts`.
    -   Why it's important: Separates the static configuration data from the dynamic hook logic, making the configuration easier to manage and update.
    -   How it works: Create the new file, move the configuration array, ensure it imports necessary types and functions, export it, and update `useBreadcrumbs.ts` to import it.
-   **Modularization of API Fetchers:**
    -   What it does: Group all API data fetching functions (e.g., `fetchGradientName`, `fetchMemeName`) used by the breadcrumb configurations into `hooks/breadcrumbs.api.ts`.
    -   Why it's important: Consolidates external data fetching logic, making it clear what data sources the breadcrumb system depends on.
    -   How it works: Create the new file, move fetcher functions, ensure they have necessary imports (like `commonApiFetch`), export them, and update `breadcrumbs.config.ts` (or `useBreadcrumbs.ts` initially) to import them.
-   **Modularization of Utilities:**
    -   What it does: Move general utility functions used within the breadcrumb system (e.g., `formatCrumbDisplay`, `getDynamicParam`, `buildStaticCrumbs`) to `hooks/breadcrumbs.utils.ts`.
    -   Why it's important: Separates pure helper functions from the main hook logic and configuration, promoting reusability and clarity.
    -   How it works: Create the new file, move utility functions, export them, and update `useBreadcrumbs.ts` and `breadcrumbs.config.ts` to import them.
-   **Streamlined Hook Logic:**
    -   What it does: Refine `hooks/useBreadcrumbs.ts` to primarily contain the core hook orchestration logic, importing all separated concerns from their new modules.
    -   Why it's important: Makes the main hook file significantly shorter, more focused on its primary responsibility, and easier to understand.
    -   How it works: After all other modules are created, update `useBreadcrumbs.ts` to use imports, and remove the now-redundant local definitions.

# User Experience (Developer Experience)
-   **Improved Navigability:** Developers will find it easier and quicker to locate specific pieces of code (e.g., a type definition, a specific route's configuration, an API fetcher).
-   **Reduced Cognitive Load:** Working with the smaller, more focused `useBreadcrumbs.ts` file will be less overwhelming.
-   **Clearer Separation of Concerns:** The distinct responsibilities of each module (types, config, API, utils, hook) will be more apparent, simplifying understanding and modification.
-   **Enhanced Maintainability:** Changes to one aspect (e.g., adding a new type, modifying an API endpoint) will be localized to the relevant module, reducing the risk of unintended side effects.

# Technical Architecture
The refactor will result in the following file structure and dependencies:

1.  **`hooks/breadcrumbs.types.ts`**
    *   Contains: `DynamicRouteType`, `RouteDynamicConfig<TData, TParams>`, `SpecificDeterminedRouteInfo`, `DeterminedRouteInfo`, `BreadcrumbQueueItem`.
    *   Exports: All defined types.
    *   Dependencies: None initially (may import `Crumb` from `../components/breadcrumb/Breadcrumb` if decided to centralize that too, or other base types).

2.  **`hooks/breadcrumbs.api.ts`**
    *   Contains: `fetchGradientName`, `fetchProfileHandle`, `fetchWaveName`, `fetchMemeName`, `fetchNextgenName`, `fetchRememeName`, `fetchMemeLabName`, `fetchCollectionName`.
    *   Exports: All fetcher functions.
    *   Dependencies: `../services/api/common-api`, `../constants` (for contract addresses), `../entities/INextgen` (for `NextGenToken` type).

3.  **`hooks/breadcrumbs.utils.ts`**
    *   Contains: `formatCrumbDisplay`, `getDynamicParam`, `buildStaticCrumbs`.
    *   Exports: All utility functions.
    *   Dependencies: `../components/breadcrumb/Breadcrumb` (for `Crumb` type, used by `buildStaticCrumbs`).

4.  **`hooks/breadcrumbs.config.ts`**
    *   Contains: `DYNAMIC_ROUTE_CONFIGS` array.
    *   Exports: `DYNAMIC_ROUTE_CONFIGS`.
    *   Dependencies:
        *   `./breadcrumbs.types.ts` (for `RouteDynamicConfig`, `DynamicRouteType`).
        *   `./breadcrumbs.api.ts` (for all fetcher functions).
        *   `./breadcrumbs.utils.ts` (for `getDynamicParam`).

5.  **`hooks/useBreadcrumbs.ts`** (Main Hook)
    *   Contains: The `useBreadcrumbs` hook function, `determineRouteConfig` helper, `getQueryKey` and `fetchQueryData` helpers for `useQuery`.
    *   Imports:
        *   React hooks (`useMemo`, `useEffect`, `useState`).
        *   Next.js (`useRouter`).
        *   `@tanstack/react-query` (`useQuery`).
        *   `../components/breadcrumb/Breadcrumb` (for `Crumb` type, unless re-exported from `breadcrumbs.types.ts`).
        *   `./breadcrumbs.types.ts` (for `DeterminedRouteInfo`, etc.).
        *   `./breadcrumbs.config.ts` (for `DYNAMIC_ROUTE_CONFIGS`).
        *   `./breadcrumbs.utils.ts` (for `buildStaticCrumbs`, `formatCrumbDisplay` if used directly by `determineRouteConfig` or other local helpers).

# Development Roadmap
The refactoring will be performed in the following phases:

1.  **Phase 1: Type Extraction:** Create `hooks/breadcrumbs.types.ts` and move all relevant type definitions into it. Update `useBreadcrumbs.ts` to import these types.
2.  **Phase 2: API Fetcher Extraction:** Create `hooks/breadcrumbs.api.ts` and move all API data fetching functions. Update `useBreadcrumbs.ts` (temporarily) or `breadcrumbs.config.ts` (later) to use these.
3.  **Phase 3: Utility Function Extraction:** Create `hooks/breadcrumbs.utils.ts` and move helper functions like `formatCrumbDisplay`, `getDynamicParam`, and `buildStaticCrumbs`. Update `useBreadcrumbs.ts` and other relevant places.
4.  **Phase 4: Configuration Extraction:** Create `hooks/breadcrumbs.config.ts`. Move `DYNAMIC_ROUTE_CONFIGS` into it, ensuring it correctly imports types from `breadcrumbs.types.ts`, fetchers from `breadcrumbs.api.ts`, and utilities from `breadcrumbs.utils.ts`. Update `useBreadcrumbs.ts` to import the configuration array.
5.  **Phase 5: Final Hook Refinement:** Clean up `hooks/useBreadcrumbs.ts` by removing all moved code and ensuring all imports are correct. Verify that the hook's core logic is streamlined and primarily orchestrates calls to the new modules.

# Logical Dependency Chain
-   **Foundation:** `breadcrumbs.types.ts` must be established first, as many other new modules will depend on these types.
-   **Parallelizable (after types):** `breadcrumbs.api.ts` and `breadcrumbs.utils.ts` can be created. Their internal logic is largely self-contained or depends on external/base types.
-   **Integration Point:** `breadcrumbs.config.ts` depends on `types`, `api`, and `utils`. It integrates these components to define the route configurations.
-   **Final Consumer:** `useBreadcrumbs.ts` is refactored last, consuming all the newly created modules (`types`, `config`, `utils`, potentially `api` directly if some fetchers are not solely used via config).

# Risks and Mitigations
-   **Risk 1: Import/Export Errors or Circular Dependencies:** During the stepwise movement of code, incorrect import paths or accidental circular dependencies could arise.
    -   **Mitigation:** Perform changes in small, testable steps. After each module creation and code migration, verify that imports resolve correctly and the application still compiles/runs. Carefully plan the dependency flow (as outlined in Technical Architecture and Logical Dependency Chain).
-   **Risk 2: Overlooking Dependencies:** Some functions or types might have subtle dependencies that are missed during the initial move.
    -   **Mitigation:** Thorough code review after each file manipulation. Utilize TypeScript compiler errors to identify missing imports or type mismatches. Conduct comprehensive testing after the full refactor.
-   **Risk 3: Reduced Cohesion for Minor Changes:** If a very small change spans across a type, its usage in a config, and a utility it uses, it might require touching multiple files.
    -   **Mitigation:** This is a trade-off for better overall organization. The benefit of clear separation for larger changes and understanding outweighs this for most cases. Ensure module responsibilities are very clear.
-   **Risk 4: Naming Conflicts:** New files or exported members could potentially conflict with existing names if not planned carefully.
    -   **Mitigation:** Adopt a clear naming convention for the new files (e.g., `breadcrumbs.*.ts`). Review existing file/variable names in the `hooks` directory.

# Appendix
N/A for now. 
