# Task ID: 18
# Title: Restyle TermsOfServiceModal.tsx to match AgreementStep.tsx design
# Status: pending
# Dependencies: None
# Priority: medium
# Description: Update the visual styling of the TermsOfServiceModal component to align with the AgreementStep component's aesthetic while maintaining all existing functionality.
# Details:
Modify the TermsOfServiceModal.tsx component to match the visual style of AgreementStep.tsx for UI consistency. Specific changes include:

1. Background color: Change the modal content area background to iron-900
2. Terms box: Apply iron-800/50 border to the terms content container
3. Text styling: Use iron-300 for text color, with small (sm) size and bold weight for labels
4. Checkbox replacement: Replace the standard checkbox with the custom-styled implementation from AgreementStep.tsx

Important considerations:
- Preserve all existing modal functionality including opening/closing behavior and terms acceptance logic
- Ensure the modal remains responsive across all screen sizes
- Maintain accessibility standards (keyboard navigation, screen reader support)
- Import any necessary styling utilities or components from the AgreementStep implementation
- If the AgreementStep uses any custom animations or transitions, apply those consistently
- Ensure text remains legible with the new color scheme

Review both components thoroughly before implementation to identify any additional styling elements that should be consistent between them.

# Test Strategy:
Testing should verify both visual consistency and functional integrity:

1. Visual verification:
   - Compare screenshots of the restyled modal side-by-side with AgreementStep to confirm visual consistency
   - Verify all specified color changes (iron-900 background, iron-800/50 border, iron-300 text)
   - Confirm text styling matches (size, weight, color)
   - Validate the custom checkbox appears and functions identically to AgreementStep

2. Functional testing:
   - Verify the modal opens and closes correctly
   - Confirm the terms content displays properly
   - Test checkbox interaction (checking/unchecking)
   - Ensure any related form submission or validation still works
   - Test keyboard navigation and tab order

3. Responsive testing:
   - Test on multiple screen sizes (mobile, tablet, desktop)
   - Verify content remains properly formatted and legible

4. Accessibility testing:
   - Verify screen reader compatibility
   - Check keyboard navigation
   - Confirm color contrast meets WCAG standards

Document any visual differences before and after the changes with screenshots for review.

# Subtasks:
## 1. Update background colors and container styling in TermsOfServiceModal [done]
### Dependencies: None
### Description: Modify the background colors and container styling of the TermsOfServiceModal component to match the AgreementStep design, focusing on the modal content area and terms content container.
### Details:
Implementation steps:
1. Review the AgreementStep.tsx component to identify the exact color values and styling properties
2. Update the modal content area background to iron-900
3. Apply iron-800/50 border to the terms content container
4. Ensure the modal container maintains proper padding, margin, and border-radius values consistent with AgreementStep
5. Verify that the modal remains responsive across all screen sizes by testing at different viewport dimensions
6. Test the changes with different screen readers to ensure accessibility is maintained

Testing approach:
- Visually compare the updated modal with AgreementStep to ensure color consistency
- Test the modal at various screen sizes to verify responsive behavior
- Verify that the modal still opens and closes correctly after styling changes

<info added on 2025-04-27T10:44:00.396Z>
### Implementation Details for TermsOfServiceModal Styling

**File Structure and Component Analysis:**
- Primary file: `components/terms/TermsOfServiceModal.tsx`
- Related file for reference: `components/onboarding/AgreementStep.tsx`

**Specific CSS Changes:**
```tsx
// Current styling (to be replaced)
<div className="tw-max-h-[400px] tw-overflow-y-auto tw-border tw-border-iron-700 tw-rounded tw-p-4 tw-mb-4 focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-blue-500" tabIndex={0}>
  {/* Terms content */}
</div>

// Updated styling
<div className="tw-max-h-[400px] tw-overflow-y-auto tw-border tw-border-iron-800/50 tw-rounded-lg tw-p-3 lg:tw-p-5 tw-mb-4 tw-bg-iron-900 focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-blue-500" tabIndex={0}>
  {/* Terms content */}
</div>
```

**Modal Container Adjustments:**
- Ensure the parent modal container has proper spacing with: `tw-p-4 sm:tw-p-6`
- Add responsive width constraints: `tw-max-w-md sm:tw-max-w-lg md:tw-max-w-xl`
- Consider adding a subtle shadow for depth: `tw-shadow-lg`

**Accessibility Considerations:**
- Maintain the existing tabIndex and focus styles
- Ensure color contrast ratio meets WCAG standards (at least 4.5:1 for normal text)
- Test with VoiceOver, NVDA, and JAWS screen readers

**Responsive Behavior Notes:**
- The `lg:tw-p-5` class ensures proper padding on larger screens
- Consider adding `sm:tw-max-h-[500px]` to allow more content visibility on larger screens
</info added on 2025-04-27T10:44:00.396Z>

## 2. Update text styling and typography in TermsOfServiceModal [done]
### Dependencies: 18.1
### Description: Modify the text styling in the TermsOfServiceModal to match the typography used in AgreementStep, including text colors, sizes, and weights.
### Details:
Implementation steps:
1. Update text color to iron-300 throughout the modal
2. Apply small (sm) size and bold weight for labels, matching AgreementStep's implementation
3. Ensure headings, paragraphs, and other text elements follow the same typography hierarchy as in AgreementStep
4. Verify that all text remains legible with the new color scheme, especially for users with visual impairments
5. Maintain proper text spacing and line heights for readability
6. Update any link or button text styling to match AgreementStep

Testing approach:
- Verify text legibility across different screen sizes
- Test with screen readers to ensure text is properly announced
- Check contrast ratios meet WCAG accessibility standards
- Verify that text styling is consistent with AgreementStep

<info added on 2025-04-27T10:45:02.962Z>
For implementation in `components/terms/TermsOfServiceModal.tsx`:

```tsx
// Typography constants to match AgreementStep
const TEXT_STYLES = {
  heading: "tw-text-lg tw-font-semibold tw-text-iron-300 tw-mb-4",
  paragraph: "tw-text-sm tw-text-iron-300 tw-leading-relaxed",
  label: "tw-text-sm tw-font-bold tw-text-iron-300",
  error: "tw-text-sm tw-text-red-500"
};

// Example implementation for checkbox label
<label className="tw-flex tw-items-center tw-cursor-pointer">
  <input 
    type="checkbox"
    checked={isChecked}
    onChange={handleCheckboxChange}
    className="tw-mr-2"
  />
  <span className={TEXT_STYLES.label}>I agree to the terms of service</span>
</label>

// For modal content paragraphs
<div className={TEXT_STYLES.paragraph}>
  {termsContent || "No terms of service found."}
</div>

// For headings
<h3 className={TEXT_STYLES.heading}>Terms of Service</h3>
```

Consider extracting these text styles into a shared constants file that both `TermsOfServiceModal` and `AgreementStep` can import to ensure consistency. This would make future typography updates easier to maintain across components.

For accessibility testing, use the axe DevTools browser extension to verify contrast ratios meet WCAG AA standards (4.5:1 for normal text, 3:1 for large text).
</info added on 2025-04-27T10:45:02.962Z>

## 3. Replace standard checkbox with custom-styled implementation from AgreementStep [in-progress]
### Dependencies: 18.1, 18.2
### Description: Replace the standard checkbox in TermsOfServiceModal with the custom-styled checkbox implementation from AgreementStep while preserving all existing checkbox functionality.
### Details:
Implementation steps:
1. Identify and extract the custom checkbox implementation from AgreementStep.tsx
2. Import any necessary styling utilities, components, or animations used by the custom checkbox
3. Replace the standard checkbox in TermsOfServiceModal with the custom implementation
4. Ensure the checkbox maintains its current functionality for terms acceptance
5. Implement any animations or transitions used in AgreementStep's checkbox
6. Verify that keyboard navigation and focus states work correctly with the custom checkbox
7. Ensure the checkbox state (checked/unchecked) is visually clear and matches AgreementStep's design

Testing approach:
- Test checkbox functionality to ensure it still properly tracks acceptance state
- Verify keyboard accessibility (can be focused and toggled with keyboard)
- Test with screen readers to ensure the checkbox state is properly announced
- Verify that the checkbox visually matches the one in AgreementStep
- Test any animations or transitions to ensure they work smoothly

<info added on 2025-04-27T10:46:00.618Z>
## Implementation Details for Custom Checkbox

### Code Structure
```tsx
// Extract from AgreementStep.tsx - custom checkbox button structure
<button
  type="button"
  onClick={() => setHasAcknowledged(!hasAcknowledged)}
  className={cn(
    "tw-flex tw-items-center tw-gap-2 tw-mb-4",
    "tw-text-left tw-transition-colors",
    hasAcknowledged ? "tw-text-white" : "tw-text-iron-400"
  )}
  disabled={isLoading}
  aria-label="Agree to terms of service checkbox"
  aria-checked={hasAcknowledged}
  role="checkbox"
>
  <div
    className={cn(
      "tw-w-5 tw-h-5 tw-rounded tw-flex tw-items-center tw-justify-center tw-transition-colors",
      hasAcknowledged ? "tw-bg-primary-500" : "tw-border tw-border-iron-600"
    )}
  >
    {hasAcknowledged && (
      <svg width="14" height="10" viewBox="0 0 14 10" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M1 5L5 9L13 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
      </svg>
    )}
  </div>
  <span className="tw-text-sm tw-text-iron-300 tw-font-bold">I have read and agree to the terms of service</span>
</button>
```

### Animation Considerations
- The checkbox in AgreementStep likely uses a subtle animation when toggling states
- Consider adding a motion.div with Framer Motion if the original uses animations:
  ```tsx
  import { motion } from "framer-motion";
  
  // Replace the SVG with:
  {hasAcknowledged && (
    <motion.svg 
      initial={{ opacity: 0, scale: 0.5 }}
      animate={{ opacity: 1, scale: 1 }}
      width="14" height="10" viewBox="0 0 14 10" fill="none" xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M1 5L5 9L13 1" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
    </motion.svg>
  )}
  ```

### Accessibility Enhancements
- Add focus styles to ensure keyboard navigation is visually apparent:
  ```
  "focus:tw-outline-none focus:tw-ring-2 focus:tw-ring-primary-500 focus:tw-ring-offset-2 focus:tw-ring-offset-iron-900"
  ```
- Ensure proper keyboard handling with onKeyDown:
  ```tsx
  onKeyDown={(e) => {
    if (e.key === 'Enter' || e.key === ' ') {
      e.preventDefault();
      setHasAcknowledged(!hasAcknowledged);
    }
  }}
  ```

### Testing Notes
- Use React Testing Library to verify the checkbox can be toggled programmatically:
  ```tsx
  const checkbox = screen.getByRole('checkbox', { name: /agree to terms/i });
  fireEvent.click(checkbox);
  expect(checkbox).toHaveAttribute('aria-checked', 'true');
  ```
</info added on 2025-04-27T10:46:00.618Z>

