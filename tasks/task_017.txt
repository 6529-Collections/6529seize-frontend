# Task ID: 17
# Title: Set up Frontend Testing Framework with Jest, RTL, Playwright and Code Coverage
# Status: done
# Dependencies: None
# Priority: high
# Description: Implement a comprehensive frontend testing framework that includes Jest for unit testing, React Testing Library for component testing, Playwright for end-to-end testing, and configure code coverage reporting.
# Details:
This task involves setting up a complete testing infrastructure for the frontend application:

1. Install required dependencies:
   - Jest and its related packages (@types/jest, ts-jest if using TypeScript)
   - React Testing Library (@testing-library/react, @testing-library/user-event, @testing-library/jest-dom)
   - Playwright (@playwright/test)
   - Coverage tools (istanbul, nyc, or Jest's built-in coverage)

2. Configure Jest:
   - Create jest.config.js with appropriate presets and configuration
   - Set up test environment (jsdom)
   - Configure module mocking and transformations
   - Set up test paths and patterns

3. Set up React Testing Library:
   - Create test-utils.js/ts for common testing utilities
   - Configure custom renders with providers if needed
   - Set up global jest-dom extensions

4. Configure Playwright:
   - Create playwright.config.js/ts
   - Set up browser configurations (Chromium, Firefox, WebKit)
   - Configure screenshot and video recording options
   - Set up test directories and patterns

5. Implement code coverage:
   - Configure Jest coverage collection
   - Set coverage thresholds (e.g., 80% line coverage)
   - Set up coverage reporting formats (lcov, json, text)
   - Configure coverage exclusions for irrelevant files

6. Create CI integration:
   - Add npm scripts for running different test types
   - Configure test commands for CI pipeline
   - Set up coverage reporting in CI

7. Create documentation:
   - Document how to run tests locally
   - Explain testing conventions and patterns to follow

# Test Strategy:
To verify this task has been correctly implemented:

1. Verify installation and configuration:
   - Check that all required packages are correctly installed in package.json
   - Confirm configuration files exist and contain correct settings (jest.config.js, playwright.config.js)

2. Test the Jest and React Testing Library setup:
   - Create a simple component test using RTL
   - Run the test and verify it passes
   - Check that test utilities are working correctly

3. Test Playwright setup:
   - Create a simple E2E test that opens the application
   - Run the test against multiple browsers
   - Verify screenshots or videos are captured correctly

4. Validate code coverage:
   - Run tests with coverage enabled
   - Verify coverage reports are generated in the expected format
   - Check that coverage thresholds are applied

5. Verify CI integration:
   - Run the test scripts defined in package.json
   - Ensure all test types (unit, component, E2E) can be run separately
   - Verify coverage reports are generated during CI runs

6. Documentation check:
   - Review documentation for completeness
   - Have another team member follow the documentation to run tests
   - Ensure all testing patterns and conventions are clearly explained

# Subtasks:
## 1. Install and Configure Testing Dependencies [done]
### Dependencies: None
### Description: Install all required testing packages and set up basic configuration files for Jest, React Testing Library, and Playwright.
### Details:
Implementation steps:
1. Install Jest and related packages: `npm install --save-dev jest @types/jest ts-jest jest-environment-jsdom`
2. Install React Testing Library packages: `npm install --save-dev @testing-library/react @testing-library/user-event @testing-library/jest-dom`
3. Install Playwright: `npm install --save-dev @playwright/test`
4. Install Mock Service Worker for API mocking: `npm install --save-dev msw`
5. Create basic jest.config.js/ts file with Next.js compatibility:
   ```js
   module.exports = {
     testEnvironment: 'jest-environment-jsdom',
     setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
     moduleNameMapper: {
       '^@/components/(.*)$': '<rootDir>/components/$1',
       '^@/pages/(.*)$': '<rootDir>/pages/$1',
       '^@/utils/(.*)$': '<rootDir>/utils/$1'
     },
     transform: {
       '^.+\\.(ts|tsx)$': 'ts-jest'
     },
     testPathIgnorePatterns: ['<rootDir>/node_modules/', '<rootDir>/.next/']
   };
   ```
6. Create jest.setup.js file to extend Jest with RTL:
   ```js
   import '@testing-library/jest-dom';
   ```
7. Create basic playwright.config.js/ts:
   ```js
   import { PlaywrightTestConfig } from '@playwright/test';
   
   const config: PlaywrightTestConfig = {
     testDir: './e2e',
     use: {
       baseURL: 'http://localhost:3000',
       screenshot: 'only-on-failure',
       video: 'on-first-retry'
     },
     projects: [
       { name: 'Chrome', use: { browserName: 'chromium' } },
       { name: 'Firefox', use: { browserName: 'firefox' } },
       { name: 'Safari', use: { browserName: 'webkit' } }
     ]
   };
   
   export default config;
   ```
8. Create test directories: `mkdir -p __tests__/unit __tests__/integration e2e`

Testing approach:
- Verify all packages install correctly without conflicts
- Ensure configuration files are created with proper syntax
- Run `npx jest --version` and `npx playwright --version` to verify installations

## 2. Set Up Test Utilities and Common Testing Patterns [done]
### Dependencies: 17.1
### Description: Create utility functions and helpers for testing, including custom render functions for React Testing Library and common test patterns.
### Details:
Implementation steps:
1. Create a test-utils.js/ts file in the __tests__ directory:
   ```tsx
   import React, { ReactElement } from 'react';
   import { render, RenderOptions } from '@testing-library/react';
   // Import any providers your app uses (e.g., Redux, Theme, Router)
   import { ThemeProvider } from 'your-theme-provider';
   import { theme } from '../path/to/your/theme';
   
   const AllProviders = ({ children }) => {
     return (
       <ThemeProvider theme={theme}>
         {children}
       </ThemeProvider>
     );
   };
   
   const customRender = (ui: ReactElement, options?: Omit<RenderOptions, 'wrapper'>) =>
     render(ui, { wrapper: AllProviders, ...options });
   
   // Re-export everything from RTL
   export * from '@testing-library/react';
   
   // Override render method
   export { customRender as render };
   ```
2. Create a mock service worker setup file (msw-server.js/ts):
   ```js
   import { setupServer } from 'msw/node';
   
   // Create and export the server
   export const server = setupServer();
   ```
3. Update jest.setup.js to include MSW setup:
   ```js
   import '@testing-library/jest-dom';
   import { server } from './msw-server';
   
   // Establish API mocking before all tests
   beforeAll(() => server.listen());
   // Reset any request handlers between tests
   afterEach(() => server.resetHandlers());
   // Clean up after tests are done
   afterAll(() => server.close());
   ```
4. Create a fixtures directory for test data:
   ```
   mkdir -p __tests__/fixtures
   ```
5. Create a sample test data file (__tests__/fixtures/testData.js):
   ```js
   export const sampleUser = {
     id: 1,
     name: 'Test User',
     email: 'test@example.com'
   };
   ```

Testing approach:
- Import the custom render function in a simple test to verify it works
- Verify that the MSW server can be imported without errors
- Create a simple test that uses the test fixtures to ensure they're properly exported

<info added on 2025-04-27T06:23:53.962Z>
Here's additional information for your test utility infrastructure:

```tsx
// src/lib/testing/render.tsx
import React, { ReactElement } from 'react';
import { render, RenderOptions } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from 'react-query';
import { ThemeProvider } from '../theme/ThemeProvider';

// Create a fresh QueryClient for each test
const createTestQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: {
      retry: false,
      cacheTime: 0,
      staleTime: 0,
      refetchOnWindowFocus: false,
    },
  },
});

// Helper function to wait for all pending promises
export const waitForPromises = () => new Promise(resolve => setTimeout(resolve, 0));

// Custom render with all providers
export function renderWithProviders(
  ui: ReactElement,
  options?: Omit<RenderOptions, 'wrapper'> & {
    queryClient?: QueryClient;
    initialRoute?: string;
  }
) {
  const queryClient = options?.queryClient || createTestQueryClient();
  
  function Wrapper({ children }: { children: React.ReactNode }) {
    return (
      <QueryClientProvider client={queryClient}>
        <ThemeProvider>{children}</ThemeProvider>
      </QueryClientProvider>
    );
  }
  
  return {
    ...render(ui, { wrapper: Wrapper, ...options }),
    queryClient,
  };
}

// Common test utilities
// src/lib/testing/utils.ts
export const mockAPIResponse = <T>(data: T) => {
  return {
    json: jest.fn().mockResolvedValue(data),
    ok: true,
    status: 200,
  };
};

export const createMockComponent = (name: string) => 
  function MockComponent(props: any) {
    return <div data-testid={`mock-${name}`} {...props} />;
  };
```
</info added on 2025-04-27T06:23:53.962Z>

## 3. Implement Basic Unit and Component Tests [done]
### Dependencies: 17.1, 17.2
### Description: Create initial unit tests for utility functions and component tests using React Testing Library to establish testing patterns.
### Details:
Implementation steps:
1. Create a simple utility function to test (utils/formatDate.js):
   ```js
   export function formatDate(date) {
     return new Date(date).toLocaleDateString();
   }
   ```

2. Write a unit test for the utility function (__tests__/unit/formatDate.test.js):
   ```js
   import { formatDate } from '../../utils/formatDate';
   
   describe('formatDate', () => {
     it('formats a date string correctly', () => {
       const result = formatDate('2023-01-01');
       expect(result).toMatch(/\d{1,2}[\/\-]\d{1,2}[\/\-]\d{2,4}/); // Matches date pattern
     });
   });
   ```

3. Create a simple component to test (components/Button.jsx):
   ```jsx
   export function Button({ onClick, children }) {
     return (
       <button onClick={onClick} className="btn">
         {children}
       </button>
     );
   }
   ```

4. Write a component test using RTL (__tests__/integration/Button.test.jsx):
   ```jsx
   import { render, screen, fireEvent } from '../test-utils';
   import { Button } from '../../components/Button';
   
   describe('Button', () => {
     it('renders with correct text', () => {
       render(<Button>Click me</Button>);
       expect(screen.getByText('Click me')).toBeInTheDocument();
     });
     
     it('calls onClick when clicked', () => {
       const handleClick = jest.fn();
       render(<Button onClick={handleClick}>Click me</Button>);
       fireEvent.click(screen.getByText('Click me'));
       expect(handleClick).toHaveBeenCalledTimes(1);
     });
   });
   ```

5. Create a test for a component with state (__tests__/integration/Counter.test.jsx):
   ```jsx
   import { render, screen, fireEvent } from '../test-utils';
   import { Counter } from '../../components/Counter';
   
   describe('Counter', () => {
     it('increments count when button is clicked', () => {
       render(<Counter />);
       expect(screen.getByText('Count: 0')).toBeInTheDocument();
       fireEvent.click(screen.getByText('Increment'));
       expect(screen.getByText('Count: 1')).toBeInTheDocument();
     });
   });
   ```

6. Create the Counter component (components/Counter.jsx):
   ```jsx
   import { useState } from 'react';
   import { Button } from './Button';
   
   export function Counter() {
     const [count, setCount] = useState(0);
     return (
       <div>
         <p>Count: {count}</p>
         <Button onClick={() => setCount(count + 1)}>Increment</Button>
       </div>
     );
   }
   ```

7. Add npm script to package.json for running unit and component tests:
   ```json
   "scripts": {
     "test:unit": "jest __tests__/unit",
     "test:integration": "jest __tests__/integration"
   }
   ```

Testing approach:
- Run `npm run test:unit` to verify unit tests pass
- Run `npm run test:integration` to verify component tests pass
- Check that tests follow the established patterns and use the custom render function

<info added on 2025-04-27T06:25:46.843Z>
To address the placeholder test infrastructure, I'll add details about setting up a proper test environment and configuration:

```
Test Environment Setup:

1. Create a test-utils.js file for custom render function:
   ```jsx
   // __tests__/test-utils.js
   import { render } from '@testing-library/react';
   
   // Custom render function that can be extended with providers if needed
   const customRender = (ui, options = {}) => {
     return render(ui, { ...options });
   };
   
   // Re-export everything from RTL
   export * from '@testing-library/react';
   
   // Override render method
   export { customRender as render };
   ```

2. Configure Jest in jest.config.js:
   ```js
   module.exports = {
     testEnvironment: 'jsdom',
     setupFilesAfterEnv: ['<rootDir>/jest.setup.js'],
     moduleNameMapper: {
       '\\.(css|less|scss)$': 'identity-obj-proxy'
     },
     testPathIgnorePatterns: ['/node_modules/', '/.next/'],
     transform: {
       '^.+\\.(js|jsx|ts|tsx)$': ['babel-jest', { presets: ['next/babel'] }]
     }
   };
   ```

3. Create Jest setup file:
   ```js
   // jest.setup.js
   import '@testing-library/jest-dom';
   ```

4. Add test directory structure:
   ```
   __tests__/
     unit/           # For pure function tests
     integration/    # For component tests
     e2e/            # For end-to-end tests (future)
     mocks/          # For test mocks
     fixtures/       # For test data
   ```

5. Add watch mode script to package.json:
   ```json
   "test:watch": "jest --watch"
   ```
```
</info added on 2025-04-27T06:25:46.843Z>

## 4. Set Up End-to-End Testing with Playwright [done]
### Dependencies: 17.1
### Description: Implement basic end-to-end tests using Playwright to test application flows across multiple pages.
### Details:
Implementation steps:
1. Create a basic e2e test for the homepage (e2e/home.spec.ts):
   ```ts
   import { test, expect } from '@playwright/test';
   
   test('homepage loads correctly', async ({ page }) => {
     await page.goto('/');
     await expect(page).toHaveTitle(/Your App Name/); // Adjust to match your app's title
     await expect(page.locator('h1')).toBeVisible();
   });
   ```

2. Create a navigation test (e2e/navigation.spec.ts):
   ```ts
   import { test, expect } from '@playwright/test';
   
   test('can navigate between pages', async ({ page }) => {
     // Start at the home page
     await page.goto('/');
     
     // Find and click a navigation link (adjust selector as needed)
     await page.click('a[href="/about"]');
     
     // Verify we navigated to the about page
     await expect(page).toHaveURL(/about/);
     await expect(page.locator('h1')).toContainText(/About/i);
   });
   ```

3. Create a form submission test (e2e/form.spec.ts):
   ```ts
   import { test, expect } from '@playwright/test';
   
   test('can submit a form', async ({ page }) => {
     // Go to the page with the form
     await page.goto('/contact'); // Adjust to your form page
     
     // Fill out the form
     await page.fill('input[name="name"]', 'Test User');
     await page.fill('input[name="email"]', 'test@example.com');
     await page.fill('textarea[name="message"]', 'This is a test message');
     
     // Submit the form
     await page.click('button[type="submit"]');
     
     // Verify success message appears
     await expect(page.locator('.success-message')).toBeVisible();
     await expect(page.locator('.success-message')).toContainText(/thank you/i);
   });
   ```

4. Add a test for responsive design (e2e/responsive.spec.ts):
   ```ts
   import { test, expect } from '@playwright/test';
   
   test.describe('Responsive design tests', () => {
     test('mobile view shows menu button', async ({ page }) => {
       // Set viewport to mobile size
       await page.setViewportSize({ width: 375, height: 667 });
       await page.goto('/');
       
       // Check that mobile menu button is visible
       await expect(page.locator('.mobile-menu-button')).toBeVisible();
     });
     
     test('desktop view shows navigation links', async ({ page }) => {
       // Set viewport to desktop size
       await page.setViewportSize({ width: 1280, height: 800 });
       await page.goto('/');
       
       // Check that desktop navigation is visible
       await expect(page.locator('nav .desktop-links')).toBeVisible();
     });
   });
   ```

5. Add npm scripts to package.json for running Playwright tests:
   ```json
   "scripts": {
     "test:e2e": "playwright test",
     "test:e2e:ui": "playwright test --ui",
     "test:e2e:debug": "playwright test --debug"
   }
   ```

Testing approach:
- Start the development server: `npm run dev`
- Run `npm run test:e2e` to execute all Playwright tests
- Verify tests pass and generate appropriate screenshots on failure
- Try `npm run test:e2e:ui` to use Playwright's UI mode for debugging

<info added on 2025-04-27T06:26:38.376Z>
To enhance the existing Playwright E2E test infrastructure, I'll add the following details:

## Playwright Configuration Setup

1. Create a `playwright.config.ts` file in the project root:
```ts
import { defineConfig, devices } from '@playwright/test';

export default defineConfig({
  testDir: './e2e',
  timeout: 30000,
  fullyParallel: true,
  forbidOnly: !!process.env.CI,
  retries: process.env.CI ? 2 : 0,
  workers: process.env.CI ? 1 : undefined,
  reporter: [['html'], ['list']],
  use: {
    baseURL: 'http://localhost:3000',
    trace: 'on-first-retry',
    screenshot: 'only-on-failure',
  },
  projects: [
    {
      name: 'chromium',
      use: { ...devices['Desktop Chrome'] },
    },
    {
      name: 'firefox',
      use: { ...devices['Desktop Firefox'] },
    },
    {
      name: 'webkit',
      use: { ...devices['Desktop Safari'] },
    },
    {
      name: 'Mobile Chrome',
      use: { ...devices['Pixel 5'] },
    },
    {
      name: 'Mobile Safari',
      use: { ...devices['iPhone 12'] },
    },
  ],
  webServer: {
    command: 'npm run dev',
    port: 3000,
    reuseExistingServer: !process.env.CI,
  },
});
```

2. Create a `.github/workflows/playwright.yml` file for CI integration:
```yaml
name: Playwright Tests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: 18
    - name: Install dependencies
        run: npm ci
    - name: Install Playwright Browsers
        run: npx playwright install --with-deps
    - name: Run Playwright tests
        run: npx playwright test
    - uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30
```

3. Add a test fixtures file `e2e/fixtures.ts` for common test setup:
```ts
import { test as base } from '@playwright/test';

// Extend the base test fixture with custom authentication
export const test = base.extend({
  authenticatedPage: async ({ page }, use) => {
    // Navigate to login page
    await page.goto('/login');
    
    // Fill login form (adjust selectors as needed)
    await page.fill('[name="email"]', process.env.TEST_USER_EMAIL || 'test@example.com');
    await page.fill('[name="password"]', process.env.TEST_USER_PASSWORD || 'password123');
    await page.click('button[type="submit"]');
    
    // Wait for navigation to complete
    await page.waitForURL('/**');
    
    // Use the authenticated page
    await use(page);
  },
});

export { expect } from '@playwright/test';
```

4. Add a visual regression test example in `e2e/visual.spec.ts`:
```ts
import { test, expect } from '@playwright/test';

test('visual comparison of homepage', async ({ page }) => {
  await page.goto('/');
  
  // Take a screenshot and compare with baseline
  await expect(page).toHaveScreenshot('homepage.png', {
    maxDiffPixelRatio: 0.01
  });
});
```

5. Add a `.gitignore` entry for Playwright-specific files:
```
# Playwright
/test-results/
/playwright-report/
/playwright/.cache/
/test-results/
/blob-report/
/playwright/.auth/
```
</info added on 2025-04-27T06:26:38.376Z>

## 5. Configure Code Coverage and CI Integration [done]
### Dependencies: 17.1, 17.2, 17.3, 17.4
### Description: Set up code coverage reporting for Jest tests and configure the testing framework to run in CI environments.
### Details:
Implementation steps:
1. Update Jest configuration to collect coverage (jest.config.js):
   ```js
   module.exports = {
     // ... existing config
     collectCoverageFrom: [
       'components/**/*.{js,jsx,ts,tsx}',
       'utils/**/*.{js,jsx,ts,tsx}',
       'pages/**/*.{js,jsx,ts,tsx}',
       '!**/*.d.ts',
       '!**/node_modules/**',
       '!**/.next/**'
     ],
     coverageThreshold: {
       global: {
         statements: 80,
         branches: 80,
         functions: 80,
         lines: 80
       }
     },
     coverageReporters: ['json', 'lcov', 'text', 'clover']
   };
   ```

2. Add coverage scripts to package.json:
   ```json
   "scripts": {
     "test": "jest",
     "test:coverage": "jest --coverage",
     "test:watch": "jest --watch"
   }
   ```

3. Create a .github/workflows/test.yml file for GitHub Actions CI (or equivalent for your CI system):
   ```yaml
   name: Test
   
   on:
     push:
       branches: [main, develop]
     pull_request:
       branches: [main, develop]
   
   jobs:
     test:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v3
         - name: Use Node.js
           uses: actions/setup-node@v3
           with:
             node-version: '18.x'
             cache: 'npm'
         - run: npm ci
         - run: npm run test:coverage
         - name: Upload coverage reports
           uses: codecov/codecov-action@v3
           with:
             token: ${{ secrets.CODECOV_TOKEN }}
     
     e2e:
       runs-on: ubuntu-latest
       steps:
         - uses: actions/checkout@v3
         - name: Use Node.js
           uses: actions/setup-node@v3
           with:
             node-version: '18.x'
             cache: 'npm'
         - name: Install dependencies
           run: npm ci
         - name: Install Playwright browsers
           run: npx playwright install --with-deps
         - name: Build the app
           run: npm run build
         - name: Start the app and run tests
           run: |
             npm run start & npx wait-on http://localhost:3000
             npm run test:e2e
   ```

4. Create a .gitignore entry for coverage reports:
   ```
   # Coverage directory
   coverage/
   ```

5. Create a README.md section for testing documentation:
   ```markdown
   ## Testing
   
   This project uses Jest, React Testing Library, and Playwright for testing.
   
   ### Running Tests
   
   - Unit and integration tests: `npm test`
   - Watch mode: `npm run test:watch`
   - Coverage report: `npm run test:coverage`
   - E2E tests: `npm run test:e2e`
   
   ### Testing Conventions
   
   - Unit tests: Test individual functions and utilities
   - Integration tests: Test components with their interactions
   - E2E tests: Test full user flows across multiple pages
   
   ### Writing Tests
   
   - Use the custom render function from `__tests__/test-utils.js`
   - Mock API calls using MSW in `__tests__/msw-server.js`
   - Follow the AAA pattern (Arrange, Act, Assert)
   - Test user interactions, not implementation details
   ```

6. Create a .env.test file for test-specific environment variables:
   ```
   # Test environment variables
   NEXT_PUBLIC_API_URL=http://localhost:3000/api
   ```

Testing approach:
- Run `npm run test:coverage` to generate coverage reports
- Verify coverage reports are generated in the coverage/ directory
- Check that coverage meets the defined thresholds
- If possible, test the CI workflow by pushing to a test branch

<info added on 2025-04-27T06:27:38.878Z>
Here's additional information to enhance the subtask:

```
Additional CI/CD and Coverage Configuration:

1. Enhance Jest coverage configuration with custom reporters:
   ```js
   // Add to jest.config.js
   coveragePathIgnorePatterns: [
     '/node_modules/',
     '/__tests__/',
     '/test-utils/',
     '/.next/',
     '/coverage/',
     '/mocks/'
   ],
   // Add JUnit reporter for CI integration
   reporters: [
     'default',
     ['jest-junit', {
       outputDirectory: './test-results/jest',
       outputName: 'results.xml',
     }]
   ]
   ```

2. Install additional dependencies:
   ```bash
   npm install --save-dev jest-junit @codecov/codecov-action
   ```

3. Add coverage badge to README.md:
   ```markdown
   [![codecov](https://codecov.io/gh/your-username/your-repo/branch/main/graph/badge.svg)](https://codecov.io/gh/your-username/your-repo)
   ```

4. Create a .codecov.yml configuration file:
   ```yaml
   coverage:
     status:
       project:
         default:
           target: 80%
           threshold: 2%
       patch:
         default:
           target: 80%
           threshold: 2%
   
   comment:
     layout: "reach, diff, flags, files"
     behavior: default
     require_changes: false
   ```

5. Add cache optimization to GitHub Actions workflow:
   ```yaml
   - name: Cache Playwright browsers
     uses: actions/cache@v3
     with:
       path: ~/.cache/ms-playwright
       key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
       restore-keys: |
         playwright-${{ runner.os }}-
   ```

6. Add PR comment with test coverage using GitHub Actions:
   ```yaml
   - name: Comment PR with coverage
     if: github.event_name == 'pull_request'
     uses: marocchino/sticky-pull-request-comment@v2
     with:
       header: test-coverage
       message: |
         ### Test Coverage Report
         
         | Category | Coverage |
         | -------- | -------- |
         | Statements | ${{ steps.coverage.outputs.statements }}% |
         | Branches | ${{ steps.coverage.outputs.branches }}% |
         | Functions | ${{ steps.coverage.outputs.functions }}% |
         | Lines | ${{ steps.coverage.outputs.lines }}% |
   ```

7. Configure Jest to fail on coverage threshold violations in CI only:
   ```js
   // Add to jest.config.js
   const isCI = process.env.CI === 'true';
   
   module.exports = {
     // ... existing config
     coverageThreshold: isCI ? {
       global: {
         statements: 80,
         branches: 80,
         functions: 80,
         lines: 80
       }
     } : null
   };
   ```
```
</info added on 2025-04-27T06:27:38.878Z>

