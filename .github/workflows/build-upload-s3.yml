name: Build and Upload to S3

on: workflow_dispatch

env:
  AWS_BUCKET: "seize-web"
  COMMIT_SHA: "${{ github.sha }}"
  AWS_REGION: "us-east-1"
  BEANSTALK_APP_NAME: "seize app"
  BEANSTACK_ENV_NAME: "Seizeapp-env"

jobs:
  build-upload-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install

      - name: Build App
        env:
          NODE_ENV: "production"
          API_ENDPOINT: "https://api.seize.io"
          ALLOWLIST_API_ENDPOINT: "https://allowlist-api.seize.io"
          BASE_ENDPOINT: "https://seize.io"
          LOAD_S3: "true"
          VERSION: ${{ env.COMMIT_SHA }}
          ALCHEMY_API_KEY: ${{ secrets.ALCHEMY_API_KEY }}
        run: npm run build

      - name: Build Target
        run: |
          mkdir -p target/_next
          cp -r .next/static target/_next/
          zip -r package.zip . -x '*.git*' 'node_modules/*' 'target/*'
          mv package.zip target/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload assets to S3
        run: aws s3 sync target s3://${{ env.AWS_BUCKET }}/web_build/${{ env.COMMIT_SHA }}/

      - name: Create new ElasticBeanstalk Application Version
        run: |
          export DESCRIPTION=$(git show -s --format=%s)
          aws elasticbeanstalk create-application-version \
          --application-name "${{ env.BEANSTALK_APP_NAME }}" \
          --source-bundle S3Bucket="${{ env.AWS_BUCKET }}",S3Key="web_build/${{ env.COMMIT_SHA }}/package.zip" \
          --version-label "${{ env.COMMIT_SHA }}" \
          --description "${DESCRIPTION:0:100}"

      - name: Validate Deployment
        run: |
          INSTANCE_COUNT=$(aws elasticbeanstalk describe-environment-resources --environment-name Seizeapp-env --region us-east-1 --query "EnvironmentResources.Instances[*].Id" --output text | wc -w)
          echo "Instance count: $INSTANCE_COUNT"
          if [[ "$INSTANCE_COUNT" -lt 2 ]]; then
            echo "Deployment Aborted: Less than 2 instances are running."
            exit 1
          fi

      - name: Deploy new Version to ElasticBeanstalk
        run: |
          aws elasticbeanstalk update-environment \
          --application-name "${{ env.BEANSTALK_APP_NAME }}" \
          --environment-name "${{ env.BEANSTACK_ENV_NAME }}" \
          --version-label "${{ env.COMMIT_SHA }}"

      - name: Check Elastic Beanstalk status (30s warmup then 30 retries with 10s delay)
        run: |
          echo "Warmup..."
          MAX_RETRIES=30
          COUNTER=0
          sleep 30
          ENVIRONMENT_ID=$(aws elasticbeanstalk describe-environments --environment-names ${{ env.BEANSTALK_ENV_NAME }} --query 'Environments[0].EnvironmentId' --output text)
          while : ; do
            ALL_HEALTHY=true
            INSTANCE_HEALTHS=$(aws elasticbeanstalk describe-instances-health --environment-id $ENVIRONMENT_ID --attribute-names All --query 'InstanceHealthList[].HealthStatus' --output text)
            echo "Checking instance health statuses: $INSTANCE_HEALTHS"
            for STATUS in $INSTANCE_HEALTHS; do
              if [[ $STATUS != "Ok" ]]; then
                ALL_HEALTHY=false
                break
              fi
            done
            if $ALL_HEALTHY && [[ $COUNTER -lt $MAX_RETRIES ]]; then
              echo "All instances are in good health!"
              break
            elif [[ $COUNTER -eq $MAX_RETRIES ]]; then
              echo "Some instances are not healthy within the expected time."
              exit 1
            fi
            COUNTER=$((COUNTER+1))
            echo "Waiting for instances to become healthy... Attempt: $COUNTER"
            sleep 10
          done
