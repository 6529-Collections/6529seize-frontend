export interface ReservoirTokensResponse {
  tokens: ReservoirTokensResponseTokenElement[];
  continuation: string | null;
}

export interface ReservoirTokensResponseTokenElement {
  token: ReservoirTokensResponseTokenToken;
  market: ReservoirTokensResponseMarket;
  updatedAt: string;
}

interface ReservoirTokensResponseMarket {
  floorAsk: ReservoirTokensResponseFloorAsk;
}

interface ReservoirTokensResponseFloorAsk {
  id: null | string;
  price: ReservoirTokensResponsePrice | null;
  maker: null | string;
  validFrom: number | null;
  validUntil: number | null;
  source: ReservoirTokensResponseSource | null;
}

interface ReservoirTokensResponsePrice {
  currency: ReservoirTokensResponseCurrency;
  amount: ReservoirTokensResponseAmount;
}

interface ReservoirTokensResponseAmount {
  raw: string;
  decimal: number;
  usd: number;
  native: number;
}

interface ReservoirTokensResponseCurrency {
  contract: string;
  name: string;
  symbol: string;
  decimals: number;
}

interface ReservoirTokensResponseSource {
  id: string;
  domain: string;
  name: string;
  icon: string;
  url: string;
}

interface ReservoirTokensResponseTokenToken {
  chainId: number;
  contract: string;
  tokenId: string;
  name: string;
  description: string;
  image: string;
  imageSmall: string;
  imageLarge: string;
  metadata: ReservoirTokensResponseMetadata;
  media: null;
  kind: string;
  isFlagged: boolean;
  isSpam: boolean;
  isNsfw: boolean;
  metadataDisabled: boolean;
  lastFlagUpdate: string;
  lastFlagChange: string;
  supply: string;
  remainingSupply: string;
  decimals: null;
  rarity: number;
  rarityRank: number;
  collection: ReservoirTokensResponseCollection;
  owner: string;
  mintStages: any[];
}

interface ReservoirTokensResponseCollection {
  id: string;
  name: string;
  image: string;
  slug: string;
  symbol: string;
  creator: string;
  tokenCount: number;
  metadataDisabled: boolean;
  floorAskPrice: ReservoirTokensResponsePrice;
}

interface ReservoirTokensResponseMetadata {
  imageOriginal: string;
  imageMimeType: string;
  tokenURI: string;
}

// Generated by https://quicktype.io

interface ReservoirCollectionResponse {
  collections: ReservoirCollectionResponseCollection[];
}

interface ReservoirCollectionResponseCollection {
  collectionId: string;
  name: string;
  slug: string;
  contract: string;
  image: string;
  isSpam: boolean;
  metadataDisabled: boolean;
  allTimeVolume: number;
  floorAskPrice: ReservoirCollectionResponseFloorAskPrice;
  openseaVerificationStatus: string | null;
}

interface ReservoirCollectionResponseFloorAskPrice {
  currency: ReservoirCollectionResponseCurrency;
  amount: ReservoirCollectionResponseAmount;
}

interface ReservoirCollectionResponseAmount {
  raw: string;
  decimal: number;
  usd: number;
  native: number;
}

interface ReservoirCollectionResponseCurrency {
  contract: string;
  name: string;
  symbol: string;
  decimals: number;
}
