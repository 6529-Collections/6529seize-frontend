import { Crumb } from "@/components/breadcrumb/Breadcrumb";

/**
 * Defines the recognized types for dynamic routes within the breadcrumb system.
 */
export type DynamicRouteType =
  | "gradient"
  | "profile"
  | "meme"
  | "collection"
  | "wave"
  | "nextgen"
  | "meme-lab"
  | "rememe";

/**
 * Configuration for a dynamic route type used in breadcrumb generation.
 * @template TData The expected type of data resolved by the fetcher. This is typically an object
 *                 containing fields needed for display (e.g., `{ name: string }`) or null.
 * @template TParams The expected type of parameters extracted from the route by `paramExtractor`.
 *                   This is typically an object mapping param names to string values (e.g., `{ id: string }`).
 */
export interface RouteDynamicConfig<TData = any, TParams = any> {
  /** A unique identifier for the route type, constrained by `DynamicRouteType`. Used for discriminating configs. */
  readonly type: DynamicRouteType;
  /**
   * A regular expression to match the primary path segment(s) that identify this route type.
   * For example, `/^the-memes$/` for a route starting with "the-memes".
   */
  readonly pathPattern: RegExp;
  /**
   * Extracts necessary parameters (like IDs or handles) from the route's path segments and query.
   * @param pathSegments readonly array of URL path segments (e.g., `["the-memes", "123"]`).
   * @param query readonly record of URL query parameters (e.g., `{ handle: "user1" }`).
   * @returns The extracted parameters (TParams) if successful, otherwise undefined.
   */
  readonly paramExtractor: (
    pathSegments: readonly string[],
    query: Readonly<Record<string, string | string[]>>
  ) => TParams | undefined;
  /**
   * Asynchronously fetches data required for the breadcrumb display (e.g., item name).
   * @param params The parameters extracted by paramExtractor.
   * @returns A promise that resolves to the fetched data (TData) or null if not found/error.
   */
  readonly fetcher: (params: TParams) => Promise<TData | null>;
  /**
   * Builds the react-query query key for fetching data for this route type.
   * @param params The parameters extracted by paramExtractor.
   * @returns A readonly array representing the query key.
   */
  readonly queryKeyBuilder: (params: TParams) => readonly unknown[];
  /**
   * Constructs the array of Crumb objects for this dynamic route.
   * @param params The parameters extracted by paramExtractor.
   * @param data The data resolved by the fetcher (TData).
   * @param isLoading Boolean indicating if the data is currently being fetched.
   * @param pathSegments readonly array of URL path segments (can be used for context).
   * @param query readonly record of URL query parameters (can be used for context).
   * @returns An array of Crumb objects specific to this route.
   */
  readonly crumbBuilder: (
    params: TParams,
    data: TData | null | undefined,
    isLoading: boolean,
    pathSegments: readonly string[],
    query: Readonly<Record<string, string | string[]>>
  ) => Crumb[];
  /** Optional array of static parent crumbs that should always precede crumbs generated by this configuration. */
  readonly parentCrumbs?: readonly Crumb[];
}

/**
 * Type definition for breadcrumb queue item, used for debouncing/managing route changes.
 */
export interface BreadcrumbQueueItem {
  pathname: string;
  asPath: string;
  query: Record<string, string | string[]>;
  timestamp: number;
}
