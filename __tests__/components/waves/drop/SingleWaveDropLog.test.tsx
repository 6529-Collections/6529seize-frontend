import { render, screen } from '@testing-library/react';
import React from 'react';
import { SingleWaveDropLog } from '../../../../components/waves/drop/SingleWaveDropLog';
import { ApiWaveCreditType } from '../../../../generated/models/ApiWaveCreditType';

jest.mock('next/link', () => ({ __esModule: true, default: ({ href, children }: any) => <a href={href}>{children}</a> }));
jest.mock('next/image', () => ({ __esModule: true, default: (p: any) => <img {...p} /> }));
jest.mock('../../../../helpers/image.helpers', () => ({ getScaledImageUri: (u:string)=>u, ImageScale:{ W_AUTO_H_50:'' } }));
jest.mock('../../../../hooks/isMobileScreen', () => ({ __esModule: true, default: jest.fn(() => false) }));
const mobileMock = require('../../../../hooks/isMobileScreen').default as jest.Mock;
jest.mock('../../../../helpers/Helpers', () => ({ formatNumberWithCommas: (n:number)=>String(n), getTimeAgoShort: ()=>'1h' }));
jest.mock('../../../../helpers/AllowlistToolHelpers', () => ({ isEthereumAddress: () => true, isAutoGeneratedHandle: () => false }));
jest.mock('../../../../components/common/SystemAdjustmentPill', () => ({ SystemAdjustmentPill: () => <span data-testid="pill" /> }));

describe('SingleWaveDropLog', () => {
  const baseLog:any = { created_at: Date.now(), invoker:{ handle:'0xabc', pfp:'' }, contents:{ oldVote:0, newVote:1 }, id:'1' };
  it('renders desktop layout with pill', () => {
    render(<SingleWaveDropLog log={{ ...baseLog, contents:{ oldVote:1, newVote:2, reason:'CREDIT_OVERSPENT' } }} creditType={ApiWaveCreditType.Tdh} />);
    expect(screen.getByText('0xabc')).toBeInTheDocument();
    expect(screen.getByText('2 TDH')).toBeInTheDocument();
    expect(screen.getByTestId('pill')).toBeInTheDocument();
    expect(document.body.innerHTML).toContain('tw-truncate');
  });

  it('shows avatar placeholder when no pfp and mobile', () => {
    mobileMock.mockReturnValue(true);
    const { container } = render(<SingleWaveDropLog log={baseLog} creditType={ApiWaveCreditType.Rep} />);
    expect(container.querySelector('.tw-size-7')).toBeInTheDocument();
  });
});
